# 📊 MCD - Bibliothèque Numérique Personnelle

## 🎯 Vue d'ensemble du projet
**Objectif** : Application web full-stack pour gérer une collection personnelle d'œuvres culturelles (manga / manhwa) avec lecture par chapitres, marquage de statut et filtres de recherche.

---

## 📋 Entités et Attributs

### 👤 **USER** (Utilisateur)
- **id** : INT (PK, AUTO_INCREMENT)
- **email** : VARCHAR(180) UNIQUE NOT NULL
- **password** : VARCHAR(255) NOT NULL (hashé)
- **nom** : VARCHAR(255) NOT NULL
- **roles** : JSON (tableau des rôles)
- **created_at** : DATETIME
- **updated_at** : DATETIME

### ✍️ **AUTEUR** (Auteur d'œuvre)
- **id** : INT (PK, AUTO_INCREMENT)
- **nom** : VARCHAR(255) NOT NULL
- **prenom** : VARCHAR(255) NULLABLE
- **nom_plume** : VARCHAR(255) NULLABLE (pseudonyme)
- **biographie** : TEXT NULLABLE
- **date_naissance** : DATE NULLABLE
- **nationalite** : VARCHAR(100) NULLABLE
- **created_at** : DATETIME
- **updated_at** : DATETIME

### 📚 **OEUVRE** (Œuvre culturelle)
- **id** : INT (PK, AUTO_INCREMENT)
- **titre** : VARCHAR(255) NOT NULL
- **auteur_id** : INT (FK vers AUTEUR)
- **type** : VARCHAR(50) NOT NULL (livre, manga, film, CD)
- **couverture** : VARCHAR(255) NULLABLE (URL/chemin image)
- **resume** : TEXT NULLABLE
- **date_publication** : DATE NULLABLE
- **isbn** : VARCHAR(20) NULLABLE
- **created_at** : DATETIME
- **updated_at** : DATETIME

### 📖 **CHAPITRE** (Chapitre/Episode)
- **id** : INT (PK, AUTO_INCREMENT)
- **titre** : VARCHAR(255) NOT NULL
- **ordre** : INT NOT NULL (numéro d'ordre)
- **resume** : TEXT NULLABLE
- **pages** : JSON (tableau des pages/images)
- **oeuvre_id** : INT (FK vers OEUVRE)
- **created_at** : DATETIME
- **updated_at** : DATETIME

### 🏷️ **TAG** (Étiquette)
- **id** : INT (PK, AUTO_INCREMENT)
- **nom** : VARCHAR(255) NOT NULL UNIQUE
- **created_at** : DATETIME

### 📊 **STATUT** (Statut de lecture)
- **id** : INT (PK, AUTO_INCREMENT)
- **nom** : VARCHAR(50) NOT NULL (à lire, lu, en cours, prêté à...)
- **user_id** : INT (FK vers USER)
- **oeuvre_id** : INT (FK vers OEUVRE)
- **created_at** : DATETIME
- **updated_at** : DATETIME

### 📚 **COLLECTION_USER** (Collection personnelle)
- **id** : INT (PK, AUTO_INCREMENT)
- **user_id** : INT (FK vers USER)
- **oeuvre_id** : INT (FK vers OEUVRE)
- **date_ajout** : DATETIME NOT NULL
- **note_personnelle** : TEXT NULLABLE
- **created_at** : DATETIME

---

## 🔗 Relations et Cardinalités

```
┌─────────────┐         ┌─────────────┐         ┌─────────────┐
│    USER     │         │   AUTEUR    │         │   OEUVRE    │
│             │         │             │         │             │
│ • id (PK)   │         │ • id (PK)   │    1    │ • id (PK)   │
│ • email     │         │ • nom       │────────▶│ • titre     │
│ • password  │         │ • prenom    │    n    │ • auteur_id │
│ • nom       │         │ • nom_plume │         │ • type      │
│ • roles     │         │ • biographie│         │ • couverture│
│             │         │             │         │ • resume    │
└─────────────┘         └─────────────┘         └─────────────┘
       │                                               │
       │                                               │ 1
       │ n                                             │
       │                                               ▼
       │                                        ┌─────────────┐
       │                                        │  CHAPITRE   │
       │                                        │             │
       │                                        │ • id (PK)   │
       │                                        │ • titre     │
       │                                        │ • ordre     │
       │                                        │ • resume    │
       │                                        │ • pages     │
       │                                        │ • oeuvre_id │
       │                                        └─────────────┘
       │
       ▼
┌─────────────┐    n    ┌─────────────┐    n    ┌─────────────┐
│COLLECTION_  │────────▶│   OEUVRE    │◀────────│ OEUVRE_TAG  │
│USER         │         │             │         │ (liaison)   │
│             │         │             │         │             │
│ • user_id   │         │             │         │ • oeuvre_id │
│ • oeuvre_id │         │             │         │ • tag_id    │
│ • date_ajout│         │             │         │             │
└─────────────┘         └─────────────┘         └─────────────┘
       │                       │                       │
       │ 1                     │ n                     │ n
       │                       │                       │
       ▼                       ▼                       ▼
┌─────────────┐         ┌─────────────┐         ┌─────────────┐
│   STATUT    │         │     TAG     │         │     TAG     │
│             │         │             │         │             │
│ • id (PK)   │         │ • id (PK)   │         │ • id (PK)   │
│ • nom       │         │ • nom       │         │ • nom       │
│ • user_id   │         │             │         │             │
│ • oeuvre_id │         │             │         │             │
└─────────────┘         └─────────────┘         └─────────────┘
```

---

## 📊 Détail des Relations

### 1. **AUTEUR ↔ OEUVRE** (1:n)
- **Relation** : Un auteur peut créer plusieurs œuvres
- **Cardinalité** : 1 AUTEUR → n OEUVRE
- **Clé étrangère** : `auteur_id` dans OEUVRE
- **Contrainte** : NOT NULL (une œuvre a obligatoirement un auteur)

### 2. **OEUVRE ↔ CHAPITRE** (1:n)
- **Relation** : Une œuvre peut avoir plusieurs chapitres
- **Cardinalité** : 1 OEUVRE → n CHAPITRE
- **Clé étrangère** : `oeuvre_id` dans CHAPITRE
- **Contrainte** : NOT NULL + CASCADE DELETE (suppression des chapitres si œuvre supprimée)

### 3. **USER ↔ OEUVRE** (n:n) via COLLECTION_USER
- **Relation** : Un utilisateur peut avoir plusieurs œuvres dans sa collection, une œuvre peut être dans plusieurs collections
- **Cardinalité** : n USER ↔ n OEUVRE
- **Table de liaison** : `collection_user` avec (`user_id`, `oeuvre_id`, `date_ajout`, `note_personnelle`)
- **Contraintes** : Clé primaire composite sur (user_id, oeuvre_id)

### 4. **OEUVRE ↔ TAG** (n:n)
- **Relation** : Une œuvre peut avoir plusieurs tags, un tag peut être associé à plusieurs œuvres
- **Cardinalité** : n OEUVRE ↔ n TAG
- **Table de liaison** : `oeuvre_tag` avec (`oeuvre_id`, `tag_id`)
- **Contraintes** : Clé primaire composite, contraintes de clés étrangères

### 5. **USER ↔ STATUT** (1:n)
- **Relation** : Un utilisateur peut créer plusieurs statuts
- **Cardinalité** : 1 USER → n STATUT
- **Clé étrangère** : `user_id` dans STATUT

### 6. **OEUVRE ↔ STATUT** (1:n)
- **Relation** : Une œuvre peut avoir plusieurs statuts (historique par utilisateur)
- **Cardinalité** : 1 OEUVRE → n STATUT
- **Clé étrangère** : `oeuvre_id` dans STATUT
- **Note** : Permet de garder un historique des changements de statut par utilisateur

---

## 🎯 Règles de Gestion

### Authentification & Sécurité
- Un utilisateur doit avoir un email unique
- Le mot de passe doit être hashé (bcrypt/argon2)
- Système de rôles (USER, ADMIN)

### Gestion des Auteurs
- Un auteur peut avoir un nom_plume (pseudonyme) différent de son vrai nom
- Les informations biographiques sont optionnelles
- Un auteur peut créer plusieurs œuvres

### Gestion des Œuvres
- Une œuvre appartient obligatoirement à un auteur
- Le type d'œuvre est limité : livre, manga, film, CD
- La couverture est optionnelle (URL ou chemin fichier)
- Une œuvre peut être dans plusieurs collections d'utilisateurs

### Collection Personnelle
- Un utilisateur peut ajouter des œuvres à sa collection personnelle
- Date d'ajout automatique lors de l'ajout à la collection
- Note personnelle optionnelle par œuvre et par utilisateur
- Un utilisateur ne peut pas avoir la même œuvre deux fois dans sa collection

### Gestion des Chapitres
- Les chapitres sont ordonnés (champ `ordre`)
- Le champ `pages` contient un JSON avec les URLs/chemins des pages
- Suppression en cascade : si œuvre supprimée → chapitres supprimés

### Système de Tags
- Les tags sont partagés entre toutes les œuvres
- Un tag ne peut pas être dupliqué (nom unique)
- Relation many-to-many avec les œuvres

### Statuts Personnalisables
- Chaque utilisateur peut créer ses propres statuts pour ses œuvres
- Statuts suggérés : "à lire", "lu", "en cours", "abandonné", "prêté à [nom]"
- Historique des changements de statut conservé par utilisateur

---

## 🔍 Index Recommandés

```sql
-- Index pour les recherches fréquentes
CREATE INDEX idx_oeuvre_auteur_id ON oeuvre(auteur_id);
CREATE INDEX idx_oeuvre_type ON oeuvre(type);
CREATE INDEX idx_oeuvre_titre ON oeuvre(titre);
CREATE INDEX idx_auteur_nom ON auteur(nom, prenom);
CREATE INDEX idx_auteur_nom_plume ON auteur(nom_plume);
CREATE INDEX idx_chapitre_oeuvre_id ON chapitre(oeuvre_id);
CREATE INDEX idx_chapitre_ordre ON chapitre(oeuvre_id, ordre);
CREATE INDEX idx_collection_user_id ON collection_user(user_id);
CREATE INDEX idx_collection_oeuvre_id ON collection_user(oeuvre_id);
CREATE INDEX idx_statut_user_oeuvre ON statut(user_id, oeuvre_id);
CREATE INDEX idx_tag_nom ON tag(nom);

-- Index composites pour les filtres
CREATE INDEX idx_oeuvre_auteur_type ON oeuvre(auteur_id, type);
CREATE INDEX idx_oeuvre_search ON oeuvre(titre, auteur_id);
CREATE INDEX idx_collection_user_date ON collection_user(user_id, date_ajout);
```

---

## 📈 Extensions Futures Possibles

### Entités Additionnelles
- **SERIE** : Regroupement d'œuvres en séries (tome 1, 2, 3...)
- **EDITEUR** : Maisons d'édition
- **COMMENTAIRE** : Avis et notes sur les œuvres
- **PROGRESSION** : Suivi détaillé de la lecture (page actuelle, temps passé)
- **NOTIFICATION** : Rappels et alertes
- **RECOMMENDATION** : Suggestions d'œuvres

### Relations Supplémentaires
- **USER ↔ USER** : Système d'amis/followers
- **OEUVRE ↔ OEUVRE** : Relations entre œuvres (suite, préquel, adaptation)
- **CHAPITRE ↔ USER** : Marquage "lu/non lu" par chapitre
- **AUTEUR ↔ USER** : Auteurs favoris

---

## 🛠️ Implémentation Technique

### Backend (Symfony/Doctrine)
- Entités avec annotations Doctrine
- Relations bidirectionnelles avec ArrayCollection
- Repositories pour les requêtes complexes
- API REST avec sérialisation JSON

### Frontend (React)
- État global pour la gestion des données
- Composants réutilisables pour chaque entité
- Formulaires avec validation
- Interface de lecture des chapitres

### Base de Données
- MySQL/PostgreSQL avec contraintes d'intégrité
- Migrations Doctrine pour l'évolution du schéma
- Sauvegarde régulière des données utilisateur 