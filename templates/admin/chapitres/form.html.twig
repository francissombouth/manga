{% extends 'base.html.twig' %}

{% block title %}{{ title }} - Administration{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('styles/pages/admin.css') }}">
{% endblock %}

{% block body %}


<div class="admin-container">
    <div class="form-container">
        <!-- Breadcrumb -->
        <div class="breadcrumb">
            <a href="{{ path('admin_dashboard') }}">Administration</a>
            <span>></span>
            <a href="{{ path('admin_oeuvres') }}">≈íuvres</a>
            <span>></span>
            <a href="{{ path('admin_oeuvre_chapitres', {id: oeuvre.id}) }}">Chapitres</a>
            <span>></span>
            <span>{{ title }}</span>
        </div>

        <div class="admin-header">
            <h1 class="admin-title">
                {% if chapitre.id %}‚úèÔ∏è{% else %}‚ûï{% endif %} {{ title }}
            </h1>
            
            <div class="oeuvre-info">
                <div class="oeuvre-title">{{ oeuvre.titre }}</div>
                <div class="oeuvre-meta">
                    {{ oeuvre.type }} ‚Ä¢ 
                    {% if oeuvre.auteur %}par {{ oeuvre.auteur.nom }}{% if oeuvre.auteur.prenom %} {{ oeuvre.auteur.prenom }}{% endif %}{% endif %}
                </div>
            </div>
        </div>

        <!-- Flash Messages -->
        {% for type, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ type }}">{{ message }}</div>
            {% endfor %}
        {% endfor %}

        <div class="form-card">
            {{ form_start(form) }}

            <div style="display: grid; grid-template-columns: 2fr 1fr; gap: 1rem;">
                <div class="form-group">
                    {{ form_label(form.titre) }}
                    {{ form_widget(form.titre) }}
                    {{ form_errors(form.titre) }}
                    <div class="form-help">Titre du chapitre</div>
                </div>

                <div class="form-group">
                    {{ form_label(form.ordre) }}
                    {{ form_widget(form.ordre) }}
                    {{ form_errors(form.ordre) }}
                    <div class="form-help">Num√©ro d'ordre dans l'≈ìuvre</div>
                </div>
            </div>

            <div class="form-group">
                {{ form_label(form.resume) }}
                {{ form_widget(form.resume) }}
                {{ form_errors(form.resume) }}
                <div class="form-help">R√©sum√© ou description du chapitre (optionnel)</div>
            </div>

            {% if form.oeuvre is defined %}
                <div class="form-group">
                    {{ form_label(form.oeuvre) }}
                    {{ form_widget(form.oeuvre) }}
                    {{ form_errors(form.oeuvre) }}
                </div>
            {% endif %}

            <!-- Aper√ßu des pages existantes -->
            {% if chapitre.pages and chapitre.pages|length > 0 %}
            <div class="form-group">
                <label class="form-label">üìñ Pages actuelles ({{ chapitre.pages|length }})</label>
                <div style="background: var(--bg-card); border: 2px solid var(--border-secondary); border-radius: 12px; padding: 1rem;">
                    <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 1rem;">
                        {% for page in chapitre.pages %}
                        <div style="background: var(--gradient-card); border: 1px solid var(--border-secondary); border-radius: 10px; padding: 1rem;">
                            <div style="text-align: center; margin-bottom: 0.5rem;">
                                <strong style="color: var(--accent-primary);">Page {{ loop.index }}</strong>
                            </div>
                            <div style="background: var(--bg-primary); border-radius: 8px; overflow: hidden; margin-bottom: 0.5rem; height: 250px; display: flex; align-items: center; justify-content: center;">
                                <img src="{{ page }}" alt="Page {{ loop.index }}" style="max-width: 100%; max-height: 100%; object-fit: contain;" 
                                     onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" 
                                     loading="lazy">
                                <div style="display: none; flex-direction: column; align-items: center; color: var(--text-secondary); padding: 1rem;">
                                    <div style="font-size: 2rem; margin-bottom: 0.5rem;">üñºÔ∏è</div>
                                    <span style="font-size: 0.9rem;">Image non disponible</span>
                                </div>
                            </div>
                            <div style="background: var(--bg-primary); border-radius: 6px; padding: 0.5rem; word-break: break-all; font-size: 0.8rem; color: var(--text-secondary); max-height: 60px; overflow-y: auto;">
                                {{ page }}
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                </div>
            </div>
            {% endif %}

            <div class="form-group">
                {{ form_label(form.pages) }}
                <div class="pages-collection" data-prototype="{{ form_widget(form.pages.vars.prototype)|e('html_attr') }}" data-index="{{ form.pages|length }}">
                    <h4>Pages du chapitre</h4>
                    <div class="form-help" style="margin-bottom: 1rem;">
                        Ajoutez les URLs des images de chaque page du chapitre dans l'ordre de lecture.
                    </div>
                    
                    <div class="pages-list">
                        {% for pageForm in form.pages %}
                            <div class="page-item">
                                <div style="display: flex; align-items: center; gap: 1rem; margin-bottom: 0.5rem;">
                                    <strong style="color: var(--text-primary);">Page {{ loop.index }}</strong>
                                    {% if pageForm.vars.value %}
                                        <div style="flex: 1; background: var(--bg-primary); border-radius: 6px; padding: 0.3rem 0.5rem; font-size: 0.8rem; color: var(--text-secondary); overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                            URL actuelle: {{ pageForm.vars.value|slice(0, 60) }}{% if pageForm.vars.value|length > 60 %}...{% endif %}
                                        </div>
                                    {% endif %}
                                </div>
                                {{ form_widget(pageForm) }}
                                {{ form_errors(pageForm) }}
                                <button type="button" class="page-remove-btn" onclick="removePage(this)">
                                    üóëÔ∏è Supprimer
                                </button>
                            </div>
                        {% endfor %}
                    </div>
                    
                    <div style="display: flex; gap: 1rem; align-items: center; margin-top: 1rem;">
                        <button type="button" class="add-page-btn" onclick="addPage()">
                            ‚ûï Ajouter une page
                        </button>
                        
                        {% if chapitre.mangadxChapterId %}
                        <button type="button" id="manual-fetch-btn" class="btn" style="background: linear-gradient(135deg, #f59e0b, #d97706); color: white; padding: 0.6rem 1rem; border-radius: 8px; border: none; cursor: pointer; font-weight: 600; font-size: 0.9rem; display: none;">
                            üîÑ Re-synchroniser MangaDX
                        </button>
                        <div id="fetch-status" style="color: var(--text-secondary); font-size: 0.9rem;">
                            üîÑ R√©cup√©ration automatique des pages MangaDX...
                        </div>
                        {% endif %}
                    </div>
                </div>
                {{ form_errors(form.pages) }}
            </div>

            {{ form_rest(form) }}

            <div class="form-actions">
                <a href="{{ path('admin_oeuvre_chapitres', {id: oeuvre.id}) }}" class="btn btn-secondary">
                    ‚ùå Annuler
                </a>
                <button type="submit" class="btn btn-primary">
                    {% if chapitre.id %}üíæ Mettre √† jour{% else %}‚ú® Cr√©er le chapitre{% endif %}
                </button>
            </div>

            {{ form_end(form) }}
        </div>
    </div>
</div>

<script>
function addPage() {
    const collection = document.querySelector('.pages-collection');
    const list = collection.querySelector('.pages-list');
    const index = parseInt(collection.dataset.index);
    
    const prototype = collection.dataset.prototype;
    const newForm = prototype.replace(/__name__/g, index);
    
    const wrapper = document.createElement('div');
    wrapper.className = 'page-item';
    wrapper.innerHTML = `
        <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.5rem;">
            <strong style="color: var(--text-primary);">Page ${index + 1}</strong>
        </div>
        ${newForm}
        <button type="button" class="page-remove-btn" onclick="removePage(this)">
            üóëÔ∏è Supprimer
        </button>
    `;
    
    list.appendChild(wrapper);
    collection.dataset.index = index + 1;
    
    // Focus sur le nouveau champ
    const newInput = wrapper.querySelector('input');
    if (newInput) {
        newInput.focus();
    }
    
    updatePageNumbers();
}

function removePage(button) {
    if (confirm('√ätes-vous s√ªr de vouloir supprimer cette page ?')) {
        button.closest('.page-item').remove();
        updatePageNumbers();
    }
}

function updatePageNumbers() {
    const pageItems = document.querySelectorAll('.page-item');
    pageItems.forEach((item, index) => {
        const label = item.querySelector('strong');
        if (label) {
            label.textContent = `Page ${index + 1}`;
        }
    });
}

// Initialiser les num√©ros de page au chargement
document.addEventListener('DOMContentLoaded', function() {
    updatePageNumbers();
    
    // R√©cup√©ration automatique des pages MangaDX si disponible
    const mangadxChapterId = '{{ chapitre.mangadxChapterId }}';
    if (mangadxChapterId && mangadxChapterId !== '') {
        // V√©rifier si c'est la premi√®re fois (chapitre sans pages en BDD)
        const existingPages = document.querySelectorAll('.page-item').length;
        const hasExistingPagesInDB = {{ chapitre.pages|length > 0 ? 'true' : 'false' }};
        
        if (existingPages === 0 && !hasExistingPagesInDB) {
            // Premier chargement d'un chapitre MangaDX sans pages en BDD
    
            fetchMangaDxPages();
        } else {
            const status = document.getElementById('fetch-status');
            const manualBtn = document.getElementById('manual-fetch-btn');
            
            if (status) {
                if (hasExistingPagesInDB) {
                    status.textContent = `‚ÑπÔ∏è ${existingPages} page(s) - Modifi√©es manuellement`;
                } else if (existingPages > 0) {
                    status.textContent = `‚ÑπÔ∏è ${existingPages} page(s) - En cours d'√©dition`;
                }
            }
            
            // Afficher le bouton de re-synchronisation manuelle
            if (manualBtn) {
                manualBtn.style.display = 'inline-block';
                manualBtn.addEventListener('click', function() {
                    if (confirm('‚ö†Ô∏è Voulez-vous vraiment re-synchroniser avec MangaDX ?\n\nCela remplacera toutes les pages actuelles par celles de MangaDX.')) {
                
                        fetchMangaDxPages();
                    }
                });
            }
            
    
        }
    }
});

// Fonction pour r√©cup√©rer les pages depuis MangaDX
async function fetchMangaDxPages() {
    const status = document.getElementById('fetch-status');
    const mangadxChapterId = '{{ chapitre.mangadxChapterId }}';
    
    if (!mangadxChapterId) {

        if (status) status.textContent = '‚ùå Aucun ID MangaDX';
        return;
    }
    
    // Afficher le statut de chargement
    if (status) status.textContent = 'üîÑ R√©cup√©ration des pages depuis MangaDX...';
    
    try {

        
        const response = await fetch(`/mangadx/api/chapter/${mangadxChapterId}/pages`);
        const data = await response.json();
        
        if (data.success) {
            
            
            // Log chaque URL individuellement
            data.pages.forEach((url, index) => {

            });
            
            if (status) {
                const isManual = document.getElementById('manual-fetch-btn') && document.getElementById('manual-fetch-btn').style.display !== 'none';
                status.textContent = `‚úÖ ${data.count} page(s) r√©cup√©r√©e(s) ${isManual ? 'manuellement' : 'automatiquement'}`;
            }
            
            // Injecter les URLs dans le formulaire
            injectPagesIntoForm(data.pages);
            
            // Cacher le bouton de re-synchronisation apr√®s usage
            const manualBtn = document.getElementById('manual-fetch-btn');
            if (manualBtn && manualBtn.style.display !== 'none') {
                setTimeout(() => {
                    manualBtn.style.display = 'none';
                }, 2000);
            }
            
        } else {
    
            if (status) status.textContent = `‚ùå Erreur: ${data.error}`;
        }
        
    } catch (error) {

        if (status) status.textContent = '‚ùå Erreur de connexion';
    }
}

// Fonction pour injecter les pages dans le formulaire
function injectPagesIntoForm(pages) {
    const collection = document.querySelector('.pages-collection');
    const list = collection.querySelector('.pages-list');
    
    
    
    // Vider les pages existantes
    list.innerHTML = '';
    
    // Ajouter chaque page
    pages.forEach((pageUrl, index) => {
        
        
        const prototype = collection.dataset.prototype;
        const newForm = prototype.replace(/__name__/g, index);
        
        const wrapper = document.createElement('div');
        wrapper.className = 'page-item';
        wrapper.innerHTML = `
            <div style="display: flex; align-items: center; gap: 1rem; margin-bottom: 0.5rem;">
                <strong style="color: var(--text-primary);">Page ${index + 1}</strong>
                <div style="flex: 1; background: var(--bg-primary); border-radius: 6px; padding: 0.3rem 0.5rem; font-size: 0.8rem; color: var(--text-secondary); overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                    URL MangaDX: ${pageUrl.slice(0, 60)}${pageUrl.length > 60 ? '...' : ''}
                </div>
            </div>
            ${newForm}
            <button type="button" class="page-remove-btn" onclick="removePage(this)">
                üóëÔ∏è Supprimer
            </button>
        `;
        
        list.appendChild(wrapper);
        
        // D√©finir la valeur de l'input
        const input = wrapper.querySelector('input');
        if (input) {
            input.value = pageUrl;
        }
    });
    
    // Mettre √† jour l'index de la collection
    collection.dataset.index = pages.length;
    
    
    
    // Mettre √† jour les num√©ros
    updatePageNumbers();
}
</script>
{% endblock %} 