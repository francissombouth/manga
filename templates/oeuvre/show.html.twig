{% extends 'base.html.twig' %}

{% block title %}{{ oeuvre.titre }} - {{ oeuvre.auteur ? oeuvre.auteur.nom : 'Auteur inconnu' }}{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('styles/oeuvre-responsive.css') }}">
{% endblock %}

{% block body %}
<body data-user="{{ app.user ? 'true' : 'false' }}">
<!-- Script de rechargement simplifi√© et robuste -->
<script>
    (function() {
        console.log('‚úÖ Script de rechargement initialis√© pour l\'≈ìuvre {{ oeuvre.id }}');
        
        // Variables globales pour cette page
        let reloadAttempted = false;
        let pageInitialized = false;
        const oeuvreId = '{{ oeuvre.id }}';
        const pageKey = `oeuvre_${oeuvreId}_loaded`;
        
        // Fonction pour v√©rifier si la page a besoin d'√™tre recharg√©e
        function needsReload() {
            const currentTimestamp = Date.now();
            const lastLoadTime = sessionStorage.getItem(pageKey);
            
            // Toujours recharger au premier acc√®s
            if (!lastLoadTime) {
                console.log('üîÑ Premier acc√®s √† cette ≈ìuvre, rechargement n√©cessaire');
                return true;
            }
            
            // Recharger si plus de 2 minutes se sont √©coul√©es
            if ((currentTimestamp - parseInt(lastLoadTime)) > 120000) {
                console.log('üîÑ Session expir√©e, rechargement n√©cessaire');
                return true;
            }
            
            console.log('‚úÖ Page d√©j√† recharg√©e r√©cemment');
            return false;
        }
        
        // Fonction pour marquer la page comme recharg√©e
        function markAsReloaded() {
            sessionStorage.setItem(pageKey, Date.now().toString());
            console.log('‚úÖ Page marqu√©e comme recharg√©e');
        }
        
        // Fonction d'initialisation compl√®te de la page
        function initializePage() {
            if (pageInitialized) {
                console.log('‚ö†Ô∏è Page d√©j√† initialis√©e, skip');
                return;
            }
            
            console.log('üéØ Initialisation compl√®te de la page');
            pageInitialized = true;
            
            // Attendre un peu pour s'assurer que tout est charg√©
            setTimeout(() => {
                try {
                    // Initialiser les onglets
                    if (typeof initTabs === 'function') {
                        initTabs();
                    }
                    
                    // Initialiser les autres fonctionnalit√©s
                    if (typeof checkFavoriteStatus === 'function') {
                        checkFavoriteStatus({{ oeuvre.id }});
                    }
                    if (typeof initLikeButtons === 'function') {
                        initLikeButtons();
                    }
                    if (typeof initReplies === 'function') {
                        initReplies();
                    }
                    
                    // Initialiser les √©toiles de notation
                    if (typeof initRatingStars === 'function') {
                        initRatingStars();
                    }
                    
                    // Charger la moyenne
                    loadAverageRating();
                    
                    console.log('‚úÖ Page enti√®rement initialis√©e');
                } catch (error) {
                    console.error('‚ùå Erreur lors de l\'initialisation:', error);
                }
            }, 200);
        }
        
        // Fonction de rechargement
        function performReload() {
            if (reloadAttempted) {
                console.log('‚ö†Ô∏è Rechargement d√©j√† tent√©, skip');
                return;
            }
            
            console.log('üîÑ D√©clenchement du rechargement...');
            reloadAttempted = true;
            markAsReloaded();
            
            // Utiliser Turbo si disponible, sinon rechargement classique
            if (typeof Turbo !== 'undefined') {
            Turbo.visit(window.location.href, { action: 'replace' });
        } else {
                window.location.reload(true);
            }
        }
        
        // √âcouter les √©v√©nements de chargement
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üìÑ DOMContentLoaded d√©clench√©');
            
            if (needsReload()) {
                performReload();
            } else {
                console.log('‚úÖ Initialisation directe de la page');
                initializePage();
            }
        });
        
        // Backup avec turbo:load
        document.addEventListener('turbo:load', function() {
            console.log('üöÄ Turbo:load d√©clench√©');
            
            if (!reloadAttempted && needsReload()) {
                performReload();
            } else if (!pageInitialized) {
                console.log('üîß Initialisation via Turbo');
                initializePage();
            }
        });
        
        // Gestion des erreurs
        window.addEventListener('error', function(e) {
            console.error('‚ùå Erreur globale d√©tect√©e:', e.error);
        });
        
        // Nettoyage lors du d√©chargement
        window.addEventListener('beforeunload', function() {
            console.log('üßπ Nettoyage avant d√©chargement');
        });
        
        // Exposer les fonctions pour le d√©bogage
        window.reloadDebug = {
            needsReload,
            performReload,
            initializePage,
            pageKey,
            oeuvreId
        };
        
    })();
</script>

<div class="main-container oeuvre-page">
    <!-- Contenu principal -->
    <main class="content">
        <!-- En-t√™te avec image et informations -->
        <div class="manga-header">
            <!-- Breadcrumb -->
            <div class="breadcrumb-container" style="background: rgba(139, 92, 246, 0.1); padding: 1rem; margin-bottom: 2rem; border-radius: 12px;">
                <div style="display: flex; align-items: center; gap: 0.5rem; color: var(--text-secondary); flex-wrap: wrap;">
                    <a href="{{ path('app_oeuvre_list') }}" style="color: var(--accent-purple); text-decoration: none;">üìö Catalogue</a>
                    <span>‚Üí</span>
                    <span style="word-break: break-word;">{{ oeuvre.titre }}</span>
                </div>
            </div>

            <!-- Header de l'≈ìuvre -->
            <div class="oeuvre-header" style="background: var(--card-bg); border-radius: 20px; box-shadow: var(--shadow-lg);">
                <div class="oeuvre-header-grid">
                    <!-- Couverture -->
                    <div class="oeuvre-cover">
                        {% if oeuvre.couverture %}
                            <img src="{{ oeuvre.couverture }}" alt="{{ oeuvre.titre }}" style="width: 100%; height: 100%; object-fit: cover;">
                        {% else %}
                            <div style="width: 100%; height: 100%; background: linear-gradient(45deg, var(--accent-purple), #a855f7); display: flex; align-items: center; justify-content: center; color: white; font-size: clamp(2rem, 8vw, 3rem);">
                                {% if oeuvre.type == 'Manhwa' %}üá∞üá∑{% else %}üìñ{% endif %}
                            </div>
                        {% endif %}
                    </div>

                    <!-- D√©tails de l'≈ìuvre -->
                    <div class="oeuvre-details">
                        <div style="display: flex; align-items: center; gap: min(1rem, 2vw); margin-bottom: 1rem; flex-wrap: wrap; max-width: 100%;">
                            <h1 class="oeuvre-title" style="word-wrap: break-word; overflow-wrap: break-word; max-width: 100%;">{{ oeuvre.titre }}</h1>
                            {% if is_granted('ROLE_ADMIN') %}
                                <span style="background: linear-gradient(135deg, #f59e0b, #d97706); color: white; padding: 0.5rem 1rem; border-radius: 20px; font-size: 0.9rem; font-weight: 600; display: inline-flex; align-items: center; gap: 0.5rem; max-width: 100%;">
                                    üîê Mode Admin
                                </span>
                            {% endif %}
                        </div>
                        
                        {% if oeuvre.auteur %}
                        <div style="display: flex; align-items: center; gap: min(2rem, 4vw); margin-bottom: 2rem; flex-wrap: wrap; max-width: 100%;">
                            <p style="font-size: clamp(1.2rem, 3vw, 1.5rem); color: var(--text-secondary); font-style: italic; margin: 0; word-wrap: break-word; max-width: 100%;">
                            par {{ oeuvre.auteur.nom }}{% if oeuvre.auteur.prenom %} {{ oeuvre.auteur.prenom }}{% endif %}
                        </p>
                            <!-- Moyenne des notes -->
                            <div id="moyenne-header" style="display: flex; align-items: center; gap: 0.5rem; background: rgba(139, 92, 246, 0.1); padding: 0.5rem 1rem; border-radius: 10px; max-width: 100%;">
                                <span style="color: var(--accent-purple); font-weight: 600;">‚≠ê Notre moyenne:</span>
                                <span id="average-header-display" style="color: var(--accent-purple); font-weight: 700; font-size: 1.1rem;">-</span>
                            </div>
                        </div>
                        {% endif %}
                        
                        <!-- M√©tadonn√©es -->
                        <div class="oeuvre-metadata">
                            <div class="metadata-badge">
                                üìö {{ oeuvre.type|default('MANGA') }}
                            </div>
                            {% if oeuvre.datePublication %}
                            <div class="metadata-badge secondary">
                                üìÖ {{ oeuvre.datePublication|date('Y') }}
                            </div>
                            {% endif %}
                            <div class="metadata-badge secondary">
                                üìñ {{ oeuvre.chapitres|length }} chapitre{{ oeuvre.chapitres|length > 1 ? 's' : '' }}
                            </div>
                            {% if oeuvre.auteur and oeuvre.auteur.nationalite %}
                            <div class="metadata-badge secondary">
                                üåç {{ oeuvre.auteur.nationalite }}
                            </div>
                            {% endif %}
                            
                            <!-- Badges des genres principaux -->
                            {% if oeuvre.tags|length > 0 %}
                                {% for tag in oeuvre.tags|slice(0, 3) %}
                                <a href="{{ path('app_oeuvre_list', {tag: tag.id}) }}" class="genre-tag">
                                    üé≠ {{ tag.nom }}
                                </a>
                                {% endfor %}
                                {% if oeuvre.tags|length > 3 %}
                                <div style="background: rgba(225, 29, 72, 0.1); color: #e11d48; padding: 0.5rem 1rem; border-radius: 20px; font-weight: 600; border: 2px solid rgba(225, 29, 72, 0.3); font-size: 0.9rem;">
                                    +{{ oeuvre.tags|length - 3 }} autres
                                </div>
                                {% endif %}
                            {% endif %}
                        </div>
                        
                        <!-- Genres -->
                        {% if oeuvre.tags|length > 0 %}
                        <div style="margin-bottom: 2rem;">
                            <h4 style="color: var(--text-primary); margin-bottom: 1rem; font-size: 1.1rem;">üé≠ Genres</h4>
                            <div class="genre-tags">
                                {% for tag in oeuvre.tags %}
                                <a href="{{ path('app_oeuvre_list', {tag: tag.id}) }}" class="genre-tag">
                                    üé≠ {{ tag.nom }}
                                </a>
                                {% endfor %}
                            </div>
                        </div>
                        {% endif %}
                        
                        {% if oeuvre.resume %}
                        <div class="oeuvre-resume">
                            <h3>üìÑ R√©sum√©</h3>
                            <p>{{ oeuvre.resume }}</p>
                        </div>
                        {% endif %}

                        <!-- Section de notation √©pur√©e -->
                        {% if app.user %}
                        <div id="rating-section-main" class="rating-section-modern">
                            <div class="rating-header">
                                <h3>Noter cette ≈ìuvre</h3>
                                <span id="current-rating-text-main" class="rating-display"></span>
                            </div>
                            
                            <div class="rating-container">
                                <div id="star-rating-main" class="star-rating-modern">
                                    <div class="star-modern star-main" data-rating="1">
                                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                            <polygon points="12,2 15.09,8.26 22,9.27 17,14.14 18.18,21.02 12,17.77 5.82,21.02 7,14.14 2,9.27 8.91,8.26"/>
                                        </svg>
                                    </div>
                                    <div class="star-modern star-main" data-rating="2">
                                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                            <polygon points="12,2 15.09,8.26 22,9.27 17,14.14 18.18,21.02 12,17.77 5.82,21.02 7,14.14 2,9.27 8.91,8.26"/>
                                        </svg>
                                    </div>
                                    <div class="star-modern star-main" data-rating="3">
                                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                            <polygon points="12,2 15.09,8.26 22,9.27 17,14.14 18.18,21.02 12,17.77 5.82,21.02 7,14.14 2,9.27 8.91,8.26"/>
                                        </svg>
                                    </div>
                                    <div class="star-modern star-main" data-rating="4">
                                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                            <polygon points="12,2 15.09,8.26 22,9.27 17,14.14 18.18,21.02 12,17.77 5.82,21.02 7,14.14 2,9.27 8.91,8.26"/>
                                        </svg>
                                    </div>
                                    <div class="star-modern star-main" data-rating="5">
                                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                            <polygon points="12,2 15.09,8.26 22,9.27 17,14.14 18.18,21.02 12,17.77 5.82,21.02 7,14.14 2,9.27 8.91,8.26"/>
                                        </svg>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="rating-actions-modern">
                                <button id="submit-rating-main" class="btn-rating-modern submit" style="display: none;">
                                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                        <polyline points="20,6 9,17 4,12"></polyline>
                                    </svg>
                                    Confirmer
                                </button>
                                <button id="remove-rating-main" class="btn-rating-modern remove" style="display: none;">
                                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                        <polyline points="3,6 5,6 21,6"></polyline>
                                        <path d="m19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2"></path>
                                    </svg>
                                    Supprimer
                                </button>
                            </div>
                        </div>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>

        <!-- Section avec onglets -->
        <div class="tabs-section">
            <!-- Onglets -->
            <div class="tabs-header">
                <button class="tab-btn active" data-tab="chapitres">
                    üìñ Chapitres ({{ oeuvre.chapitres|length }})
                </button>
                <button class="tab-btn" data-tab="commentaires">
                    üí¨ Commentaires ({{ commentaires|length }})
                </button>
            </div>

            <!-- Contenu onglet Chapitres -->
            <div id="tab-chapitres" class="tab-content active">
                {% if oeuvre.chapitres|length > 0 %}
                <div class="chapitres-grid">
                    {% for chapitre in oeuvre.chapitres %}
                    <div class="chapitre-card">
                        <div class="chapitre-header">
                            <div>
                                <h3 class="chapitre-title">
                                    {{ chapitre.titre }}
                                </h3>
                                <div class="chapitre-meta">
                                    <span class="chapitre-badge">
                                        Ch. {{ chapitre.ordre }}
                                    </span>
                                    <span style="color: var(--text-secondary); font-size: 0.9rem;">
                                        Ajout√© le {{ chapitre.createdAt|date('d/m/Y') }}
                                    </span>
                                </div>
                            </div>
                        </div>
                        
                        {% if chapitre.resume %}
                        <p style="color: var(--text-secondary); line-height: 1.6; margin-bottom: 1.5rem;">
                            {{ chapitre.resume|length > 200 ? chapitre.resume|slice(0, 200) ~ '...' : chapitre.resume }}
                        </p>
                        {% endif %}
                        
                        <div class="chapitre-actions">
                            {% if chapitre.mangadxChapterId %}
                                <a href="{{ path('mangadx_chapter_show', {id: chapitre.mangadxChapterId}) }}" class="btn-read">
                                    <span>üìñ</span> Lire le chapitre
                                </a>
                            {% else %}
                                <a href="{{ path('app_chapitre_show', {id: chapitre.id}) }}" class="btn-read">
                                    <span>üìñ</span> Lire le chapitre
                                </a>
                            {% endif %}
                            
                            {% if is_granted('ROLE_ADMIN') %}
                                <a href="{{ path('admin_chapitre_edit', {id: chapitre.id}) }}" style="background: linear-gradient(135deg, #f59e0b, #d97706); color: white; padding: 0.6rem 1.5rem; border-radius: 20px; text-decoration: none; font-weight: 600; transition: all 0.3s ease; display: inline-flex; align-items: center; gap: 0.5rem; font-size: 0.9rem;">
                                    <span>‚úèÔ∏è</span> √âditer
                                </a>
                            {% endif %}
                            
                            {% if chapitre.pages|length > 0 %}
                            <span style="color: var(--text-secondary); font-size: 0.9rem;">
                                {{ chapitre.pages|length }} page(s)
                            </span>
                            {% endif %}
                        </div>
                    </div>
                    {% endfor %}
                </div>
                {% else %}
                <div class="empty-state" style="text-align: center; padding: 4rem 2rem; color: var(--text-secondary);">
                    <div style="font-size: 4rem; margin-bottom: 1rem;">üìö</div>
                    <h3 style="color: var(--text-primary); margin-bottom: 1rem;">Aucun chapitre disponible</h3>
                    <p>Cette ≈ìuvre n'a pas encore de chapitres publi√©s.</p>
                    <a href="{{ path('app_oeuvre_list') }}" style="background: var(--accent-purple); color: white; padding: 0.8rem 2rem; border-radius: 25px; text-decoration: none; font-weight: 600; margin-top: 1rem; display: inline-block;">
                        üîç Explorer d'autres mangas
                    </a>
                </div>
                {% endif %}
            </div>

            <!-- Contenu onglet Commentaires -->
            <div id="tab-commentaires" class="tab-content" style="display: none;">
                {% if app.user %}

                <!-- Formulaire d'ajout de commentaire -->
                <div class="comment-form">
                    <h3 style="color: var(--text-primary); margin-bottom: 1.5rem; font-size: 1.5rem;">üí¨ Ajouter un commentaire</h3>
                    <form id="commentaire-form" style="display: grid; gap: 1.5rem;">
                        <div>
                            <label for="commentaire_contenu" style="display: block; margin-bottom: 0.5rem; color: var(--text-primary); font-weight: 600;">Votre commentaire</label>
                            <textarea id="commentaire_contenu" name="contenu" rows="3" placeholder="Exprimez-vous..." required></textarea>
                        </div>
                        <button type="submit" class="btn-submit">
                            üí¨ Publier le commentaire
                        </button>
                    </form>
                </div>
                {% else %}
                <div style="background: rgba(139, 92, 246, 0.1); border: 2px solid var(--accent-purple); border-radius: 15px; padding: 2rem; margin-bottom: 2rem; text-align: center;">
                    <h3 style="color: var(--text-primary); margin-bottom: 1rem;">üîê Connexion requise</h3>
                    <p style="color: var(--text-secondary); margin-bottom: 1.5rem;">Vous devez √™tre connect√© pour ajouter un commentaire.</p>
                    <a href="{{ path('app_login') }}" style="background: var(--accent-purple); color: white; padding: 0.8rem 2rem; border-radius: 10px; text-decoration: none; font-weight: 600;">
                        üîë Se connecter
                    </a>
                </div>
                {% endif %}

                <!-- Liste des commentaires -->
                <div id="commentaires-list">
                    {% if commentaires is empty %}
                    <div class="empty-state" style="text-align: center; padding: 4rem 2rem; color: var(--text-secondary);">
                        <div style="font-size: 4rem; margin-bottom: 1rem;">üí¨</div>
                        <h3 style="color: var(--text-primary); margin-bottom: 1rem;">Aucun commentaire</h3>
                        <p>Soyez le premier √† donner votre avis sur cette ≈ìuvre !</p>
                    </div>
                    {% else %}
                        {% for commentaire in commentaires %}
                            {% if not commentaire.parent %}
                                <div style="background: var(--surface); border-radius: 15px; padding: 2rem; border: 1px solid var(--border-color); margin-bottom: 1.5rem;">
                                    <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 1rem;">
                                        <div style="display: flex; align-items: center; gap: 1rem;">
                                            <div style="background: var(--accent-purple); color: white; padding: 0.5rem; border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; font-weight: 600;">
                                                                                    {{ commentaire.auteur.email|first|upper }}
                                </div>
                                <div>
                                    <h4 style="color: var(--text-primary); margin: 0; font-size: 1.1rem;">{{ commentaire.auteur.email }}</h4>
                                                <span style="color: var(--text-secondary); font-size: 0.9rem;">{{ commentaire.createdAt|date('d/m/Y H:i') }}</span>
                                            </div>
                                        </div>
                                    </div>
                                    <p style="color: var(--text-secondary); line-height: 1.6; margin-bottom: 1.5rem;">{{ commentaire.contenu }}</p>
                                    <div style="display: flex; align-items: center; gap: 1rem;">
                                        <button class="like-btn" data-commentaire-id="{{ commentaire.id }}" style="background: none; border: 2px solid #e11d48; color: #e11d48; padding: 0.5rem 1rem; border-radius: 20px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; gap: 0.5rem;">
                                            <span class="like-icon">{{ app.user ? (commentaire.isLikedByUser(app.user) ? '‚ù§Ô∏è' : 'ü§ç') : 'ü§ç' }}</span>
                                            <span class="like-count">{{ commentaire.likes|length }}</span> J'aime
                                        </button>
                                        {% if app.user %}
                                        <button class="reply-btn" data-commentaire-id="{{ commentaire.id }}" style="background: none; border: 2px solid var(--accent-purple); color: var(--accent-purple); padding: 0.5rem 1rem; border-radius: 20px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; gap: 0.5rem;">
                                            üí¨ R√©pondre
                                        </button>
                                        {% endif %}
                                    </div>

                                    <!-- Formulaire de r√©ponse (cach√© par d√©faut) -->
                                    <div id="reply-form-{{ commentaire.id }}" style="display: none; margin-top: 1rem; padding: 1rem; background: rgba(139, 92, 246, 0.05); border-radius: 10px;">
                                        <textarea id="reply-content-{{ commentaire.id }}" placeholder="√âcrivez votre r√©ponse..." style="width: 100%; padding: 0.8rem; border: 2px solid var(--border-color); border-radius: 8px; background: var(--card-bg); color: var(--text-primary); resize: vertical; font-family: inherit; min-height: 80px; box-sizing: border-box;"></textarea>
                                        <div style="margin-top: 0.8rem; display: flex; gap: 0.8rem;">
                                            <button onclick="submitReply({{ commentaire.id }})" style="background: var(--accent-purple); color: white; padding: 0.6rem 1.2rem; border: none; border-radius: 6px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
                                                Publier
                                            </button>
                                            <button onclick="cancelReply({{ commentaire.id }})" style="background: var(--border-color); color: var(--text-primary); padding: 0.6rem 1.2rem; border: none; border-radius: 6px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
                                                Annuler
                                            </button>
                                        </div>
                                    </div>

                                    <!-- R√©ponses -->
                                    {% if commentaire.reponses|length > 0 %}
                                    <div style="margin-top: 1rem;">
                                        <button 
                                            class="toggle-replies-btn" 
                                            data-commentaire-id="{{ commentaire.id }}" 
                                            style="background: none; border: none; color: var(--accent-purple); font-weight: 600; cursor: pointer; padding: 0.5rem 0; display: flex; align-items: center; gap: 0.5rem; font-size: 0.95rem; transition: all 0.3s ease;"
                                            onmouseover="this.style.textDecoration='underline'"
                                            onmouseout="this.style.textDecoration='none'"
                                        >
                                            <span class="toggle-icon">‚ñº</span>
                                            <span class="toggle-text">Voir {{ commentaire.reponses|length }} r√©ponse{{ commentaire.reponses|length > 1 ? 's' : '' }}</span>
                                        </button>
                                        <div id="replies-{{ commentaire.id }}" style="display: none;">
                                            {% for reponse in commentaire.reponses %}
                                                <div class="reponse-item" style="background: rgba(139, 92, 246, 0.05); border-radius: 15px; padding: 2rem; border: 1px solid var(--border-color); margin: 1rem 0 1rem {{ 30 }}px; border-left: 3px solid var(--accent-purple);">
                                                    <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 1rem;">
                                                        <div style="display: flex; align-items: center; gap: 1rem;">
                                                            <div style="background: var(--accent-purple); color: white; padding: 0.5rem; border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; font-weight: 600;">
                                                                                                                    {{ reponse.auteur.email|first|upper }}
                                                </div>
                                                <div>
                                                    <h4 style="color: var(--text-primary); margin: 0; font-size: 1rem;">{{ reponse.auteur.email }}</h4>
                                                                <span style="color: var(--text-secondary); font-size: 0.9rem;">{{ reponse.createdAt|date('d/m/Y H:i') }}</span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <p style="color: var(--text-secondary); line-height: 1.6; margin-bottom: 1rem; font-size: 1rem;">{{ reponse.contenu }}</p>
                                                    <div style="display: flex; align-items: center; gap: 1rem; flex-wrap: wrap;">
                                                        <button class="like-btn" data-commentaire-id="{{ reponse.id }}" style="background: none; border: 2px solid #e11d48; color: #e11d48; padding: 0.5rem 1rem; border-radius: 20px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; gap: 0.5rem;">
                                                            <span class="like-icon">{{ app.user ? (reponse.isLikedByUser(app.user) ? '‚ù§Ô∏è' : 'ü§ç') : 'ü§ç' }}</span>
                                                            <span class="like-count">{{ reponse.likes|length }}</span> J'aime
                                                        </button>
                                                        {% if app.user %}
                                                        <button class="reply-to-reply-btn" data-commentaire-id="{{ reponse.id }}" style="background: none; border: 2px solid var(--accent-purple); color: var(--accent-purple); padding: 0.5rem 1rem; border-radius: 20px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; gap: 0.5rem;">
                                                            üí¨ R√©pondre
                                                        </button>
                                                        {% endif %}
                                                    </div>

                                                    <!-- Formulaire de r√©ponse √† une r√©ponse -->
                                                    <div id="reply-to-reply-form-{{ reponse.id }}" style="display: none; margin-top: 1rem; padding: 1rem; background: rgba(139, 92, 246, 0.05); border-radius: 10px; border-left: 3px solid var(--accent-purple);">
                                                        <textarea id="reply-to-reply-content-{{ reponse.id }}" placeholder="R√©pondre √† cette r√©ponse..." style="width: 100%; padding: 0.8rem; border: 2px solid var(--border-color); border-radius: 8px; background: var(--card-bg); color: var(--text-primary); resize: vertical; font-family: inherit; min-height: 80px; box-sizing: border-box;"></textarea>
                                                        <div style="margin-top: 0.8rem; display: flex; gap: 0.8rem;">
                                                            <button onclick="submitReplyToReply({{ reponse.id }})" style="background: var(--accent-purple); color: white; padding: 0.6rem 1.2rem; border: none; border-radius: 6px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
                                                                Publier
                                                            </button>
                                                            <button onclick="cancelReplyToReply({{ reponse.id }})" style="background: var(--border-color); color: var(--text-primary); padding: 0.6rem 1.2rem; border: none; border-radius: 6px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
                                                                Annuler
                                                            </button>
                                                        </div>
                                                    </div>

                                                    <!-- R√©ponses aux r√©ponses (niveau 2) -->
                                                    {% if reponse.reponses|length > 0 %}
                                                    <div style="margin-top: 1rem;">
                                                        <button 
                                                            class="toggle-replies-to-replies-btn" 
                                                            data-commentaire-id="{{ reponse.id }}" 
                                                            style="background: none; border: none; color: var(--accent-purple); font-weight: 600; cursor: pointer; padding: 0.5rem 0; display: flex; align-items: center; gap: 0.5rem; font-size: 0.9rem; transition: all 0.3s ease;"
                                                            onmouseover="this.style.textDecoration='underline'"
                                                            onmouseout="this.style.textDecoration='none'"
                                                        >
                                                            <span class="toggle-icon">‚ñº</span>
                                                            <span class="toggle-text">Voir {{ reponse.reponses|length }} r√©ponse{{ reponse.reponses|length > 1 ? 's' : '' }} √† cette r√©ponse</span>
                                                        </button>
                                                        <div id="replies-to-replies-{{ reponse.id }}" style="display: none;">
                                                            {% for reponseToReponse in reponse.reponses %}
                                                                <div style="background: rgba(139, 92, 246, 0.03); border-radius: 12px; padding: 1.5rem; border: 1px solid var(--border-color); margin: 0.8rem 0 0.8rem {{ 20 }}px; border-left: 3px solid #fbbf24;">
                                                                    <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 0.8rem;">
                                                                        <div style="display: flex; align-items: center; gap: 0.8rem;">
                                                                            <div style="background: #fbbf24; color: white; padding: 0.4rem; border-radius: 50%; width: 35px; height: 35px; display: flex; align-items: center; justify-content: center; font-weight: 600; font-size: 0.9rem;">
                                                                                {{ reponseToReponse.auteur.email|first|upper }}
                                                                            </div>
                                                                            <div>
                                                                                <h5 style="color: var(--text-primary); margin: 0; font-size: 0.9rem;">{{ reponseToReponse.auteur.email }}</h5>
                                                                                <span style="color: var(--text-secondary); font-size: 0.8rem;">{{ reponseToReponse.createdAt|date('d/m/Y H:i') }}</span>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <p style="color: var(--text-secondary); line-height: 1.5; margin-bottom: 0.8rem; font-size: 0.9rem;">{{ reponseToReponse.contenu }}</p>
                                                                    <div style="display: flex; align-items: center; gap: 0.8rem;">
                                                                        <button class="like-btn" data-commentaire-id="{{ reponseToReponse.id }}" style="background: none; border: 2px solid #e11d48; color: #e11d48; padding: 0.4rem 0.8rem; border-radius: 15px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; gap: 0.4rem; font-size: 0.85rem;">
                                                                            <span class="like-icon">{{ app.user ? (reponseToReponse.isLikedByUser(app.user) ? '‚ù§Ô∏è' : 'ü§ç') : 'ü§ç' }}</span>
                                                                            <span class="like-count">{{ reponseToReponse.likes|length }}</span> J'aime
                                                                        </button>
                                                    </div>
                                                                </div>
                                                            {% endfor %}
                                                        </div>
                                                    </div>
                                                    {% endif %}
                                                </div>
                                            {% endfor %}
                                        </div>
                                    </div>
                                    {% endif %}
                                </div>
                            {% endif %}
                        {% endfor %}
                    {% endif %}
                </div>
            </div>
        </div>

        <!-- Bouton retour -->
        <div style="margin-top: 3rem; text-align: center;">
            <a href="{{ path('app_oeuvre_list') }}" style="background: rgba(139, 92, 246, 0.1); color: var(--accent-purple); padding: 1rem 2rem; border-radius: 25px; text-decoration: none; font-weight: 600; transition: all 0.3s ease; display: inline-flex; align-items: center; gap: 0.5rem; border: 2px solid var(--accent-purple);">
                ‚Üê Retour au catalogue
            </a>
        </div>

        <!-- Script principal -->
        <script>
        // Gestion des onglets et initialisation
        function initTabs() {
            console.log('üéØ Initialisation des onglets');
            const tabButtons = document.querySelectorAll('.tab-btn');
            const tabContents = document.querySelectorAll('.tab-content');
            
            tabButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const targetTab = this.getAttribute('data-tab');
                    console.log('üìë Changement vers l\'onglet:', targetTab);
                    
                    // D√©sactiver tous les onglets
                    tabButtons.forEach(btn => {
                        btn.classList.remove('active');
                        btn.style.background = 'rgba(139, 92, 246, 0.1)';
                        btn.style.color = 'var(--text-secondary)';
                    });
                    tabContents.forEach(content => {
                        content.style.display = 'none';
                        content.classList.remove('active');
                    });
                    
                    // Activer l'onglet cliqu√©
                    this.classList.add('active');
                    this.style.background = 'var(--accent-purple)';
                    this.style.color = 'white';
                    
                    const activeContent = document.getElementById(`tab-${targetTab}`);
                    if (activeContent) {
                        activeContent.style.display = 'block';
                        activeContent.classList.add('active');
                        
                        // Si c'est l'onglet commentaires, r√©initialiser les fonctionnalit√©s
                        if (targetTab === 'commentaires') {
                            console.log('üí¨ R√©initialisation de l\'onglet commentaires');
                            setTimeout(() => {
                                initLikeButtons();
                                initReplies();
                                initRatingStars();
                            }, 50);
                        }
                    }
                });
            });

            // Activer le premier onglet par d√©faut
            const firstTab = tabButtons[0];
            if (firstTab) {
                console.log('üéØ Activation du premier onglet');
                firstTab.click();
            }
        }



        function initLikeButtons() {
            console.log('‚ù§Ô∏è Initialisation des boutons de like');
            const likeButtons = document.querySelectorAll('.like-btn');
            
            // Supprimer les anciens event listeners en utilisant une approche plus s√ªre
            likeButtons.forEach(button => {
                const newButton = button.cloneNode(true);
                if (button.parentNode) {
                    button.parentNode.replaceChild(newButton, button);
                }
            });
            
            // R√©attacher les event listeners
            document.querySelectorAll('.like-btn').forEach(button => {
                button.addEventListener('click', async function(e) {
                    e.preventDefault();
                    const commentaireId = this.getAttribute('data-commentaire-id');
                    console.log('‚ù§Ô∏è Like pour le commentaire:', commentaireId);
                    
                    // V√©rifier si l'utilisateur est connect√©
                    if (!document.body.dataset.user || document.body.dataset.user === 'false') {
                        showNotification('Vous devez √™tre connect√© pour liker un commentaire', 'warning');
                        return;
                    }
                    
                    try {
                        const response = await fetch(`/api/commentaires/${commentaireId}/likes`, {
                            method: 'POST'
                        });
                        
                        if (response.status === 404) {
                            showNotification('Fonctionnalit√© de like non disponible', 'warning');
                            return;
                        }
                        
                        const data = await response.json();
                        
                        if (response.ok) {
                            const icon = this.querySelector('.like-icon');
                            const count = this.querySelector('.like-count');
                            
                            if (icon) icon.textContent = data.isLiked ? '‚ù§Ô∏è' : 'ü§ç';
                            if (count) count.textContent = data.likesCount;
                            
                            console.log('‚úÖ Like mis √† jour:', data.isLiked);
                        } else {
                            showNotification(data.message || 'Erreur lors du like', 'error');
                        }
                    } catch (error) {
                        console.log('‚ö†Ô∏è Erreur like (ignor√©e):', error.message);
                        showNotification('Fonctionnalit√© de like temporairement indisponible', 'warning');
                    }
                });
            });
        }

        function initReplies() {
            console.log('üí¨ Initialisation des r√©ponses');
            
            // Initialiser les boutons de r√©ponse
            const replyButtons = document.querySelectorAll('.reply-btn');
            console.log('üí¨ Boutons de r√©ponse trouv√©s:', replyButtons.length);
            replyButtons.forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    const commentaireId = this.getAttribute('data-commentaire-id');
                    console.log('üí¨ Affichage du formulaire de r√©ponse pour:', commentaireId);
                    showReplyForm(commentaireId);
                });
            });
            
            // Initialiser les boutons de r√©ponse aux r√©ponses
            const replyToReplyButtons = document.querySelectorAll('.reply-to-reply-btn');
            console.log('üí¨ Boutons de r√©ponse aux r√©ponses trouv√©s:', replyToReplyButtons.length);
            replyToReplyButtons.forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    const commentaireId = this.getAttribute('data-commentaire-id');
                    console.log('üí¨ Affichage du formulaire de r√©ponse √† une r√©ponse pour:', commentaireId);
                    showReplyToReplyForm(commentaireId);
                });
            });
            
            // Initialiser les boutons de basculement des r√©ponses
            const toggleButtons = document.querySelectorAll('.toggle-replies-btn');
            console.log('üîÑ Boutons de toggle trouv√©s:', toggleButtons.length);
            toggleButtons.forEach((button, index) => {
                console.log(`üîò Bouton toggle ${index}:`, button.getAttribute('data-commentaire-id'));
                
                // Supprimer les anciens event listeners
                const newButton = button.cloneNode(true);
                if (button.parentNode) {
                    button.parentNode.replaceChild(newButton, button);
                }
                
                // R√©attacher l'event listener
                newButton.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    const commentaireId = this.getAttribute('data-commentaire-id');
                    console.log('üîÑ Basculement des r√©ponses pour:', commentaireId);
                    toggleReplies(commentaireId);
                });
                
                // Ajouter un test de clic
                newButton.addEventListener('mousedown', function() {
                    console.log('üñ±Ô∏è Clic d√©tect√© sur bouton toggle:', this.getAttribute('data-commentaire-id'));
                });
            });
            
            // Initialiser les boutons de basculement des r√©ponses aux r√©ponses
            const toggleRepliesToRepliesButtons = document.querySelectorAll('.toggle-replies-to-replies-btn');
            console.log('üîÑ Boutons de toggle r√©ponses aux r√©ponses trouv√©s:', toggleRepliesToRepliesButtons.length);
            toggleRepliesToRepliesButtons.forEach((button, index) => {
                console.log(`üîò Bouton toggle r√©ponses aux r√©ponses ${index}:`, button.getAttribute('data-commentaire-id'));
                
                // Supprimer les anciens event listeners
                const newButton = button.cloneNode(true);
                if (button.parentNode) {
                    button.parentNode.replaceChild(newButton, button);
                }
                
                // R√©attacher l'event listener
                newButton.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    const commentaireId = this.getAttribute('data-commentaire-id');
                    console.log('üîÑ Basculement des r√©ponses aux r√©ponses pour:', commentaireId);
                    toggleRepliesToReplies(commentaireId);
                });
                
                // Ajouter un test de clic
                newButton.addEventListener('mousedown', function() {
                    console.log('üñ±Ô∏è Clic d√©tect√© sur bouton toggle r√©ponses aux r√©ponses:', this.getAttribute('data-commentaire-id'));
                });
            });
            
            // V√©rifier s'il y a des r√©ponses √† afficher
            const repliesDivs = document.querySelectorAll('[id^="replies-"]');
            console.log('üìÅ Divs de r√©ponses trouv√©es:', repliesDivs.length);
            repliesDivs.forEach(div => {
                const commentaireId = div.id.replace('replies-', '');
                console.log(`üìÅ Div r√©ponses ${commentaireId}:`, div.children.length, 'r√©ponses');
            });
        }

        function initRatingStars() {
            console.log('‚≠ê Initialisation des √©toiles de notation modernes');
            
            // Initialiser les √©toiles modernes
            const starMainElements = document.querySelectorAll('.star-modern.star-main');
            const starElements = document.querySelectorAll('.star-modern');
            
            // Fonction pour g√©rer les √©toiles
            function initStarRating(stars, ratingText, submitBtn, removeBtn, isMain = false) {
                let currentRating = 0;
                
                stars.forEach(star => {
                    star.addEventListener('mouseover', function() {
                        const rating = parseInt(this.getAttribute('data-rating'));
                        highlightStars(stars, rating);
                        if (ratingText) {
                            ratingText.textContent = `${rating}/5`;
                        }
                    });
                    
                    star.addEventListener('mouseout', function() {
                        highlightStars(stars, currentRating);
                        if (ratingText) {
                            ratingText.textContent = currentRating > 0 ? `${currentRating}/5` : '';
                        }
                    });
                    
                    star.addEventListener('click', function() {
                        const rating = parseInt(this.getAttribute('data-rating'));
                        currentRating = rating;
                        highlightStars(stars, rating);
                        if (ratingText) {
                            ratingText.textContent = `${rating}/5`;
                        }
                        if (submitBtn) {
                            submitBtn.style.display = 'flex';
                        }
                        if (removeBtn) {
                            removeBtn.style.display = 'flex';
                        }
                    });
                });
                
                // Gestion des boutons
                if (submitBtn) {
                    submitBtn.addEventListener('click', async function() {
                        if (currentRating > 0) {
                            await submitRating(currentRating, isMain);
                        }
                    });
                }
                
                if (removeBtn) {
                    removeBtn.addEventListener('click', async function() {
                        await removeRating(isMain);
                    });
                }
            }
            
            // Initialiser les deux syst√®mes de notation
            if (starMainElements.length > 0) {
                const ratingTextMain = document.getElementById('current-rating-text-main');
                const submitBtnMain = document.getElementById('submit-rating-main');
                const removeBtnMain = document.getElementById('remove-rating-main');
                initStarRating(starMainElements, ratingTextMain, submitBtnMain, removeBtnMain, true);
            }
            
            if (starElements.length > 0) {
                const ratingText = document.getElementById('current-rating-text');
                const submitBtn = document.getElementById('submit-rating');
                const removeBtn = document.getElementById('remove-rating');
                initStarRating(starElements, ratingText, submitBtn, removeBtn, false);
            }
            
            // Charger la note existante
            loadExistingRating();
        }
        
        function highlightStars(stars, rating) {
            stars.forEach((star, index) => {
                const svg = star.querySelector('svg');
                if (index < rating) {
                    // √âtoiles s√©lectionn√©es
                    star.classList.add('active');
                    if (svg) {
                        svg.style.color = '#ffc107';
                        svg.style.fill = '#ffc107';
                        svg.style.strokeWidth = '0';
                    }
                } else {
                    // √âtoiles non s√©lectionn√©es
                    star.classList.remove('active');
                    if (svg) {
                        svg.style.color = '#64748b';
                        svg.style.fill = 'none';
                        svg.style.strokeWidth = '1.5';
                    }
                }
            });
        }


        
        async function loadExistingRating() {
            try {
                // V√©rifier si l'utilisateur est connect√© avant de faire l'appel API
                if (!document.body.dataset.user || document.body.dataset.user === 'false') {
                    console.log('üë§ Utilisateur non connect√©, skip chargement de la note');
                    return;
                }
                
                console.log('üì° Chargement de la note existante...');
                const response = await fetch(`/api/oeuvres/{{ oeuvre.id }}/rating`);
                
                if (response.status === 404) {
                    console.log('üìù Aucune note existante pour cette ≈ìuvre');
                    return;
                }
                
                if (!response.ok) {
                    console.log('‚ö†Ô∏è Erreur lors du chargement de la note:', response.status);
                    return;
                }
                
                const data = await response.json();
                console.log('üìä Donn√©es re√ßues:', data);
                
                if (data.rating) {
                    const stars = document.querySelectorAll('.star-modern');
                    const ratingTexts = document.querySelectorAll('#current-rating-text, #current-rating-text-main');
                    const submitBtns = document.querySelectorAll('#submit-rating, #submit-rating-main');
                    const removeBtns = document.querySelectorAll('#remove-rating, #remove-rating-main');
                    
                    highlightStars(stars, data.rating);
                    ratingTexts.forEach(text => {
                        if (text) text.textContent = `${data.rating}/5`;
                    });
                    submitBtns.forEach(btn => {
                        if (btn) btn.style.display = 'flex';
                    });
                    removeBtns.forEach(btn => {
                        if (btn) btn.style.display = 'flex';
                    });
                    
                    console.log('‚úÖ Note existante charg√©e:', data.rating);
                }
                
                // Mettre √† jour l'affichage de la moyenne
                if (data.average !== undefined) {
                    updateAverageDisplay(data.average);
                }
            } catch (error) {
                console.log('‚ö†Ô∏è Erreur lors du chargement de la note (ignor√©e):', error.message);
            }
        }
        
        async function submitRating(rating, isMain = false) {
            try {
                console.log('üì§ Envoi de la note:', rating);
                const response = await fetch(`/api/oeuvres/{{ oeuvre.id }}/rating`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ rating: rating })
                });
                
                console.log('üì° R√©ponse re√ßue:', response.status);
                
                if (response.status === 404) {
                    showNotification('Fonctionnalit√© de notation non disponible', 'warning');
                    return;
                }
                
                if (response.status === 401) {
                    showNotification('Vous devez √™tre connect√© pour noter une ≈ìuvre', 'warning');
                    return;
                }
                
                const data = await response.json();
                console.log('üìä Donn√©es re√ßues:', data);
                
                if (response.ok) {
                    showNotification('Note enregistr√©e avec succ√®s !', 'success');
                    
                    // Cacher les boutons pour indiquer que l'action a √©t√© prise en compte
                    const submitBtns = document.querySelectorAll('#submit-rating, #submit-rating-main');
                    const removeBtns = document.querySelectorAll('#remove-rating, #remove-rating-main');
                    
                    submitBtns.forEach(btn => {
                        if (btn) btn.style.display = 'none';
                    });
                    removeBtns.forEach(btn => {
                        if (btn) btn.style.display = 'none';
                    });
                    
                    // Mettre √† jour l'affichage de la moyenne
                    if (data.average !== undefined) {
                        updateAverageDisplay(data.average);
                    }
                } else {
                    showNotification(data.message || 'Erreur lors de l\'enregistrement de la note', 'error');
                }
            } catch (error) {
                console.log('‚ö†Ô∏è Erreur lors de l\'enregistrement de la note (ignor√©e):', error.message);
                showNotification('Fonctionnalit√© de notation temporairement indisponible', 'warning');
            }
        }
        
        async function removeRating(isMain = false) {
            try {
                console.log('üóëÔ∏è Suppression de la note...');
                const response = await fetch(`/api/oeuvres/{{ oeuvre.id }}/rating`, {
                    method: 'DELETE'
                });
                
                console.log('üì° R√©ponse re√ßue:', response.status);
                
                if (response.status === 404) {
                    showNotification('Fonctionnalit√© de notation non disponible', 'warning');
                    return;
                }
                
                if (response.status === 401) {
                    showNotification('Vous devez √™tre connect√© pour supprimer votre note', 'warning');
                    return;
                }
                
                const data = await response.json();
                console.log('üìä Donn√©es re√ßues:', data);
                
                if (response.ok) {
                    showNotification('Note supprim√©e avec succ√®s !', 'success');
                    // R√©initialiser l'affichage
                    const stars = document.querySelectorAll('.star, .star-main');
                    const ratingTexts = document.querySelectorAll('#current-rating-text, #current-rating-text-main');
                    const submitBtns = document.querySelectorAll('#submit-rating, #submit-rating-main');
                    const removeBtns = document.querySelectorAll('#remove-rating, #remove-rating-main');
                    
                    highlightStars(stars, 0);
                    ratingTexts.forEach(text => {
                        if (text) text.textContent = '';
                    });
                    submitBtns.forEach(btn => {
                        if (btn) btn.style.display = 'none';
                    });
                    removeBtns.forEach(btn => {
                        if (btn) btn.style.display = 'none';
                    });
                    
                    // Mettre √† jour l'affichage de la moyenne
                    if (data.average !== undefined) {
                        updateAverageDisplay(data.average);
                    }
                } else {
                    showNotification(data.message || 'Erreur lors de la suppression de la note', 'error');
                }
            } catch (error) {
                console.log('‚ö†Ô∏è Erreur lors de la suppression de la note (ignor√©e):', error.message);
                showNotification('Fonctionnalit√© de notation temporairement indisponible', 'warning');
            }
        }
        
        function updateAverageDisplay(average) {
            const averageDisplay = document.getElementById('average-header-display');
            if (averageDisplay) {
                averageDisplay.textContent = average ? average.toFixed(1) : '-';
            }
        }
        
        // Fonction pour charger la moyenne au chargement de la page
        async function loadAverageRating() {
            try {
                console.log('üìä Chargement de la moyenne...');
                const response = await fetch(`/api/oeuvres/{{ oeuvre.id }}/rating`);
                
                if (response.ok) {
                    const data = await response.json();
                    if (data.average !== undefined) {
                        updateAverageDisplay(data.average);
                        console.log('‚úÖ Moyenne mise √† jour:', data.average);
                    }
                }
            } catch (error) {
                console.log('‚ö†Ô∏è Erreur lors du chargement de la moyenne (ignor√©e):', error.message);
            }
        }

        function showReplyForm(commentaireId) {
            console.log('üìù Affichage du formulaire de r√©ponse pour:', commentaireId);
            
            // Cacher tous les autres formulaires de r√©ponse
            const allReplyForms = document.querySelectorAll('[id^="reply-form-"]');
            allReplyForms.forEach(form => {
                form.style.display = 'none';
            });
            
            // Cacher tous les formulaires de r√©ponse aux r√©ponses
            const allReplyToReplyForms = document.querySelectorAll('[id^="reply-to-reply-form-"]');
            allReplyToReplyForms.forEach(form => {
                form.style.display = 'none';
            });
            
            // Afficher le formulaire de r√©ponse pour ce commentaire
            const replyForm = document.getElementById(`reply-form-${commentaireId}`);
            if (replyForm) {
                replyForm.style.display = 'block';
                const textarea = document.getElementById(`reply-content-${commentaireId}`);
                if (textarea) {
                    textarea.focus();
                }
            }
        }

        function showReplyToReplyForm(commentaireId) {
            console.log('üìù Affichage du formulaire de r√©ponse √† une r√©ponse pour:', commentaireId);
            
            // Cacher tous les autres formulaires
            const allReplyForms = document.querySelectorAll('[id^="reply-form-"]');
            allReplyForms.forEach(form => {
                form.style.display = 'none';
            });
            
            const allReplyToReplyForms = document.querySelectorAll('[id^="reply-to-reply-form-"]');
            allReplyToReplyForms.forEach(form => {
                form.style.display = 'none';
            });
            
            // Afficher le formulaire de r√©ponse √† une r√©ponse
            const replyToReplyForm = document.getElementById(`reply-to-reply-form-${commentaireId}`);
            if (replyToReplyForm) {
                replyToReplyForm.style.display = 'block';
                const textarea = document.getElementById(`reply-to-reply-content-${commentaireId}`);
                if (textarea) {
                    textarea.focus();
                }
            }
        }

        function toggleReplies(commentaireId) {
            console.log('üîÑ Toggle r√©ponses pour commentaire:', commentaireId);
            
            const repliesDiv = document.getElementById(`replies-${commentaireId}`);
            const toggleBtn = document.querySelector(`[data-commentaire-id="${commentaireId}"].toggle-replies-btn`);
            
            console.log('üìÅ Div r√©ponses trouv√©e:', !!repliesDiv);
            console.log('üîò Bouton toggle trouv√©:', !!toggleBtn);
            
            if (!repliesDiv) {
                console.error('‚ùå Div r√©ponses non trouv√©e pour:', commentaireId);
                return;
            }
            
            if (!toggleBtn) {
                console.error('‚ùå Bouton toggle non trouv√© pour:', commentaireId);
                return;
            }
            
            const toggleIcon = toggleBtn.querySelector('.toggle-icon');
            const toggleText = toggleBtn.querySelector('.toggle-text');
            
            console.log('üîç √âtat actuel:', repliesDiv.style.display);
            console.log('üìä Nombre de r√©ponses:', repliesDiv.children.length);
            
            if (repliesDiv.style.display === 'none' || repliesDiv.style.display === '') {
                console.log('üëÅÔ∏è Affichage des r√©ponses');
                repliesDiv.style.display = 'block';
                if (toggleIcon) toggleIcon.textContent = '‚ñ≤';
                if (toggleText) toggleText.textContent = 'Masquer les r√©ponses';
            } else {
                console.log('üôà Masquage des r√©ponses');
                repliesDiv.style.display = 'none';
                if (toggleIcon) toggleIcon.textContent = '‚ñº';
                const replyCount = repliesDiv.children.length;
                if (toggleText) toggleText.textContent = `Voir ${replyCount} r√©ponse${replyCount > 1 ? 's' : ''}`;
            }
            
            console.log('‚úÖ Toggle termin√©');
        }

        function toggleRepliesToReplies(commentaireId) {
            console.log('üîÑ Toggle r√©ponses aux r√©ponses pour commentaire:', commentaireId);
            
            const repliesToRepliesDiv = document.getElementById(`replies-to-replies-${commentaireId}`);
            const toggleBtn = document.querySelector(`[data-commentaire-id="${commentaireId}"].toggle-replies-to-replies-btn`);
            
            console.log('üìÅ Div r√©ponses aux r√©ponses trouv√©e:', !!repliesToRepliesDiv);
            console.log('üîò Bouton toggle trouv√©:', !!toggleBtn);
            console.log('üîç ID de la div recherch√©e:', `replies-to-replies-${commentaireId}`);
            
            if (!repliesToRepliesDiv) {
                console.error('‚ùå Div r√©ponses aux r√©ponses non trouv√©e pour:', commentaireId);
                console.log('üîç Toutes les divs avec "replies-to-replies":', document.querySelectorAll('[id^="replies-to-replies-"]'));
                return;
            }
            
            if (!toggleBtn) {
                console.error('‚ùå Bouton toggle non trouv√© pour:', commentaireId);
                console.log('üîç Tous les boutons toggle-replies-to-replies:', document.querySelectorAll('.toggle-replies-to-replies-btn'));
                return;
            }
            
            const toggleIcon = toggleBtn.querySelector('.toggle-icon');
            const toggleText = toggleBtn.querySelector('.toggle-text');
            
            console.log('üîç √âtat actuel:', repliesToRepliesDiv.style.display);
            console.log('üìä Nombre de r√©ponses aux r√©ponses:', repliesToRepliesDiv.children.length);
            console.log('üîç Contenu de la div:', repliesToRepliesDiv.innerHTML.substring(0, 100) + '...');
            
            if (repliesToRepliesDiv.style.display === 'none' || repliesToRepliesDiv.style.display === '') {
                console.log('üëÅÔ∏è Affichage des r√©ponses aux r√©ponses');
                repliesToRepliesDiv.style.display = 'block';
                if (toggleIcon) toggleIcon.textContent = '‚ñ≤';
                if (toggleText) toggleText.textContent = 'Masquer les r√©ponses √† cette r√©ponse';
            } else {
                console.log('üôà Masquage des r√©ponses aux r√©ponses');
                repliesToRepliesDiv.style.display = 'none';
                if (toggleIcon) toggleIcon.textContent = '‚ñº';
                const replyCount = repliesToRepliesDiv.children.length;
                if (toggleText) toggleText.textContent = `Voir ${replyCount} r√©ponse${replyCount > 1 ? 's' : ''} √† cette r√©ponse`;
            }
            
            console.log('‚úÖ Toggle r√©ponses aux r√©ponses termin√©');
            console.log('üîç Nouvel √©tat:', repliesToRepliesDiv.style.display);
        }

        function showNotification(message, type = 'info') {
            console.log(`üîî Notification [${type}]:`, message);
            
            // Supprimer les anciennes notifications
            const existingNotifications = document.querySelectorAll('.notification');
            existingNotifications.forEach(notif => notif.remove());
            
            const notification = document.createElement('div');
            notification.className = `notification fixed top-4 right-4 p-4 rounded-lg text-white z-50 transition-all duration-300 shadow-lg ${
                type === 'success' ? 'bg-green-500' : 
                type === 'error' ? 'bg-red-500' : 
                type === 'warning' ? 'bg-yellow-500' : 'bg-blue-500'
            }`;
            
            // Ajouter une ic√¥ne selon le type
            const icon = type === 'success' ? '‚úÖ' : 
                        type === 'error' ? '‚ùå' : 
                        type === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
            
            notification.innerHTML = `
                <div style="display: flex; align-items: center; gap: 0.5rem;">
                    <span style="font-size: 1.2rem;">${icon}</span>
                    <span>${message}</span>
                </div>
            `;
            
            document.body.appendChild(notification);
            
            // Animation d'entr√©e
            notification.style.opacity = '0';
            notification.style.transform = 'translateX(100%)';
            
            setTimeout(() => {
                notification.style.opacity = '1';
                notification.style.transform = 'translateX(0)';
            }, 10);
            
            // Auto-suppression
            setTimeout(() => {
                notification.style.opacity = '0';
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => {
                    if (notification.parentNode) {
                    notification.remove();
                    }
                }, 300);
            }, 4000);
        }

        // Gestion du formulaire de commentaire principal
        document.addEventListener('DOMContentLoaded', function() {
            const commentaireForm = document.getElementById('commentaire-form');
            if (commentaireForm) {
                commentaireForm.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    console.log('üí¨ Soumission du commentaire principal');
                    
                    const textarea = document.getElementById('commentaire_contenu');
                    const contenu = textarea.value.trim();
                    
                    if (!contenu) {
                        showNotification('Veuillez √©crire un commentaire', 'error');
                        return;
                    }
                    
                    try {
                        const response = await fetch('/api/commentaires', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ 
                                contenu: contenu,
                                oeuvreId: {{ oeuvre.id }}
                            })
                        });
                        
                        const data = await response.json();
                        
                        if (response.ok) {
                            showNotification('Commentaire ajout√© avec succ√®s !', 'success');
                            textarea.value = '';
                            
                            // Ajouter le nouveau commentaire dynamiquement
                            addNewComment(data.commentaire);
                            
                            // Mettre √† jour le compteur de commentaires
                            updateCommentCount(1);
                        } else {
                            showNotification(data.message || 'Erreur lors de l\'ajout du commentaire', 'error');
                        }
                    } catch (error) {
                        console.error('‚ùå Erreur lors de l\'ajout du commentaire:', error);
                        showNotification('Erreur lors de l\'envoi du commentaire', 'error');
                    }
                });
            }
        });

        // Fonctions globales pour les r√©ponses
        window.cancelReply = function(commentaireId) {
            console.log('‚ùå Annulation de la r√©ponse pour:', commentaireId);
            const replyForm = document.getElementById(`reply-form-${commentaireId}`);
            if (replyForm) {
                replyForm.style.display = 'none';
                const textarea = document.getElementById(`reply-content-${commentaireId}`);
                if (textarea) {
                    textarea.value = '';
                }
            }
        }

        window.submitReply = async function(commentaireId) {
            console.log('üì§ Soumission de la r√©ponse pour:', commentaireId);
            const textarea = document.getElementById(`reply-content-${commentaireId}`);
            if (!textarea) return;
            
            const contenu = textarea.value.trim();
            if (!contenu) {
                showNotification('Veuillez √©crire une r√©ponse', 'error');
                return;
            }
            
            try {
                const response = await fetch(`/api/commentaires/${commentaireId}/repondre`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ contenu: contenu })
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    showNotification('R√©ponse ajout√©e avec succ√®s !', 'success');
                    cancelReply(commentaireId);
                    
                    // Ajouter la nouvelle r√©ponse dynamiquement
                    addNewReply(commentaireId, data.reponse);
                    
                    // Mettre √† jour le compteur de r√©ponses
                    updateReplyCount(commentaireId, 1);
                } else {
                    showNotification(data.message || 'Erreur lors de l\'ajout de la r√©ponse', 'error');
                }
            } catch (error) {
                console.error('‚ùå Erreur r√©ponse:', error);
                showNotification('Erreur lors de l\'envoi de la r√©ponse', 'error');
            }
        }

        // Fonctions globales pour les r√©ponses aux r√©ponses
        window.cancelReplyToReply = function(commentaireId) {
            console.log('‚ùå Annulation de la r√©ponse √† une r√©ponse pour:', commentaireId);
            const replyToReplyForm = document.getElementById(`reply-to-reply-form-${commentaireId}`);
            if (replyToReplyForm) {
                replyToReplyForm.style.display = 'none';
                const textarea = document.getElementById(`reply-to-reply-content-${commentaireId}`);
                if (textarea) {
                    textarea.value = '';
                }
            }
        }

        window.submitReplyToReply = async function(commentaireId) {
            console.log('üì§ Soumission de la r√©ponse √† une r√©ponse pour:', commentaireId);
            const textarea = document.getElementById(`reply-to-reply-content-${commentaireId}`);
            if (!textarea) return;
            
            const contenu = textarea.value.trim();
            if (!contenu) {
                showNotification('Veuillez √©crire une r√©ponse', 'error');
                return;
            }
            
            try {
                const response = await fetch(`/api/commentaires/${commentaireId}/repondre`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ contenu: contenu })
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    showNotification('R√©ponse ajout√©e avec succ√®s !', 'success');
                    cancelReplyToReply(commentaireId);
                    
                    // Ajouter la nouvelle r√©ponse √† une r√©ponse dynamiquement
                    addNewReplyToReply(commentaireId, data.reponse);
                    
                    // Mettre √† jour le compteur de r√©ponses aux r√©ponses
                    updateReplyToReplyCount(commentaireId, 1);
                } else {
                    showNotification(data.message || 'Erreur lors de l\'ajout de la r√©ponse', 'error');
                }
            } catch (error) {
                console.error('‚ùå Erreur r√©ponse √† une r√©ponse:', error);
                showNotification('Erreur lors de l\'envoi de la r√©ponse', 'error');
            }
        }

        // Fonctions pour ajouter dynamiquement les commentaires et r√©ponses
        function addNewComment(commentaireData) {
            console.log('‚ûï Ajout dynamique du commentaire:', commentaireData.id);
            
            const commentairesList = document.getElementById('commentaires-list');
            if (!commentairesList) {
                console.error('‚ùå Liste des commentaires non trouv√©e');
                return;
            }
            
            // Supprimer le message "Aucun commentaire" s'il existe
            const emptyState = commentairesList.querySelector('.empty-state');
            if (emptyState) {
                emptyState.remove();
            }
            
            // Cr√©er le HTML du nouveau commentaire
            const commentaireHTML = generateCommentHTML(commentaireData);
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = commentaireHTML;
            const newCommentaire = tempDiv.firstElementChild;
            
            // Ajouter le commentaire au d√©but de la liste
            commentairesList.insertBefore(newCommentaire, commentairesList.firstChild);
            
            // Initialiser les fonctionnalit√©s du nouveau commentaire
            initCommentFeatures(newCommentaire);
            
            // Animation d'apparition
            newCommentaire.style.opacity = '0';
            newCommentaire.style.transform = 'translateY(-20px)';
            setTimeout(() => {
                newCommentaire.style.transition = 'all 0.3s ease';
                newCommentaire.style.opacity = '1';
                newCommentaire.style.transform = 'translateY(0)';
            }, 10);
            
            console.log('‚úÖ Commentaire ajout√© dynamiquement');
        }
        
        function addNewReply(parentCommentaireId, reponseData) {
            console.log('‚ûï Ajout dynamique de la r√©ponse:', reponseData.id, 'au commentaire:', parentCommentaireId);
            
            const repliesDiv = document.getElementById(`replies-${parentCommentaireId}`);
            if (!repliesDiv) {
                console.error('‚ùå Div r√©ponses non trouv√©e pour:', parentCommentaireId);
                return;
            }
            
            // Cr√©er le HTML de la nouvelle r√©ponse
            const reponseHTML = generateReplyHTML(reponseData);
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = reponseHTML;
            const newReponse = tempDiv.firstElementChild;
            
            // Ajouter la r√©ponse au d√©but de la liste
            repliesDiv.insertBefore(newReponse, repliesDiv.firstChild);
            
            // Initialiser les fonctionnalit√©s de la nouvelle r√©ponse
            initReplyFeatures(newReponse);
            
            // Animation d'apparition
            newReponse.style.opacity = '0';
            newReponse.style.transform = 'translateX(-20px)';
            setTimeout(() => {
                newReponse.style.transition = 'all 0.3s ease';
                newReponse.style.opacity = '1';
                newReponse.style.transform = 'translateX(0)';
            }, 10);
            
            console.log('‚úÖ R√©ponse ajout√©e dynamiquement');
        }
        
        function addNewReplyToReply(parentReponseId, reponseData) {
            console.log('‚ûï Ajout dynamique de la r√©ponse √† une r√©ponse:', reponseData.id, '√† la r√©ponse:', parentReponseId);
            
            let repliesToRepliesDiv = document.getElementById(`replies-to-replies-${parentReponseId}`);
            
            // Si la div n'existe pas, la cr√©er
            if (!repliesToRepliesDiv) {
                console.log('üîß Cr√©ation de la div r√©ponses aux r√©ponses pour:', parentReponseId);
                
                // Trouver l'√©l√©ment parent (la r√©ponse)
                const parentReponse = document.querySelector(`[data-commentaire-id="${parentReponseId}"].reponse-item`) || 
                                    document.querySelector(`#reply-to-reply-form-${parentReponseId}`)?.parentElement;
                
                if (!parentReponse) {
                    console.error('‚ùå √âl√©ment parent (r√©ponse) non trouv√© pour:', parentReponseId);
                    return;
                }
                
                // Cr√©er la div des r√©ponses aux r√©ponses
                repliesToRepliesDiv = document.createElement('div');
                repliesToRepliesDiv.id = `replies-to-replies-${parentReponseId}`;
                repliesToRepliesDiv.style.display = 'none';
                
                // Ajouter la div apr√®s le formulaire de r√©ponse
                const replyForm = parentReponse.querySelector(`#reply-to-reply-form-${parentReponseId}`);
                if (replyForm) {
                    replyForm.parentNode.insertBefore(repliesToRepliesDiv, replyForm.nextSibling);
                } else {
                    // Si pas de formulaire, ajouter √† la fin de la r√©ponse
                    parentReponse.appendChild(repliesToRepliesDiv);
                }
                
                console.log('‚úÖ Div r√©ponses aux r√©ponses cr√©√©e');
            }
            
            // Cr√©er le HTML de la nouvelle r√©ponse √† une r√©ponse
            const reponseHTML = generateReplyToReplyHTML(reponseData);
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = reponseHTML;
            const newReponse = tempDiv.firstElementChild;
            
            // Ajouter la r√©ponse au d√©but de la liste
            repliesToRepliesDiv.insertBefore(newReponse, repliesToRepliesDiv.firstChild);
            
            // Initialiser les fonctionnalit√©s de la nouvelle r√©ponse
            initReplyToReplyFeatures(newReponse);
            
            // Animation d'apparition
            newReponse.style.opacity = '0';
            newReponse.style.transform = 'translateX(-20px)';
            setTimeout(() => {
                newReponse.style.transition = 'all 0.3s ease';
                newReponse.style.opacity = '1';
                newReponse.style.transform = 'translateX(0)';
            }, 10);
            
            console.log('‚úÖ R√©ponse √† une r√©ponse ajout√©e dynamiquement');
        }
        
        function generateCommentHTML(commentaireData) {
            const userEmail = '{{ app.user.email }}';
            const currentTime = new Date().toLocaleString('fr-FR');
            
            return `
                <div style="background: var(--surface); border-radius: 15px; padding: 2rem; border: 1px solid var(--border-color); margin-bottom: 1.5rem;">
                    <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 1rem;">
                        <div style="display: flex; align-items: center; gap: 1rem;">
                            <div style="background: var(--accent-purple); color: white; padding: 0.5rem; border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; font-weight: 600;">
                                ${userEmail.charAt(0).toUpperCase()}
                            </div>
                            <div>
                                <h4 style="color: var(--text-primary); margin: 0; font-size: 1.1rem;">${userEmail}</h4>
                                <span style="color: var(--text-secondary); font-size: 0.9rem;">${currentTime}</span>
                            </div>
                        </div>
                    </div>
                    <p style="color: var(--text-secondary); line-height: 1.6; margin-bottom: 1.5rem;">${commentaireData.contenu}</p>
                    <div style="display: flex; align-items: center; gap: 1rem;">
                        <button class="like-btn" data-commentaire-id="${commentaireData.id}" style="background: none; border: 2px solid #e11d48; color: #e11d48; padding: 0.5rem 1rem; border-radius: 20px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; gap: 0.5rem;">
                            <span class="like-icon">ü§ç</span>
                            <span class="like-count">0</span> J'aime
                        </button>
                        <button class="reply-btn" data-commentaire-id="${commentaireData.id}" style="background: none; border: 2px solid var(--accent-purple); color: var(--accent-purple); padding: 0.5rem 1rem; border-radius: 20px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; gap: 0.5rem;">
                            üí¨ R√©pondre
                        </button>
                    </div>

                    <!-- Formulaire de r√©ponse (cach√© par d√©faut) -->
                    <div id="reply-form-${commentaireData.id}" style="display: none; margin-top: 1rem; padding: 1rem; background: rgba(139, 92, 246, 0.05); border-radius: 10px;">
                        <textarea id="reply-content-${commentaireData.id}" placeholder="√âcrivez votre r√©ponse..." style="width: 100%; padding: 0.8rem; border: 2px solid var(--border-color); border-radius: 8px; background: var(--card-bg); color: var(--text-primary); resize: vertical; font-family: inherit; min-height: 80px; box-sizing: border-box;"></textarea>
                        <div style="margin-top: 0.8rem; display: flex; gap: 0.8rem;">
                            <button onclick="submitReply(${commentaireData.id})" style="background: var(--accent-purple); color: white; padding: 0.6rem 1.2rem; border: none; border-radius: 6px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
                                Publier
                            </button>
                            <button onclick="cancelReply(${commentaireData.id})" style="background: var(--border-color); color: var(--text-primary); padding: 0.6rem 1.2rem; border: none; border-radius: 6px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
                                Annuler
                            </button>
                        </div>
                    </div>

                    <!-- Section des r√©ponses (vide par d√©faut) -->
                    <div id="replies-${commentaireData.id}" style="display: none;"></div>
                </div>
            `;
        }
        
        function generateReplyHTML(reponseData) {
            const userEmail = '{{ app.user.email }}';
            const currentTime = new Date().toLocaleString('fr-FR');
            
            return `
                <div class="reponse-item" style="background: rgba(139, 92, 246, 0.05); border-radius: 15px; padding: 2rem; border: 1px solid var(--border-color); margin: 1rem 0 1rem 30px; border-left: 3px solid var(--accent-purple);">
                    <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 1rem;">
                        <div style="display: flex; align-items: center; gap: 1rem;">
                            <div style="background: var(--accent-purple); color: white; padding: 0.5rem; border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; font-weight: 600;">
                                ${userEmail.charAt(0).toUpperCase()}
                            </div>
                            <div>
                                <h4 style="color: var(--text-primary); margin: 0; font-size: 1rem;">${userEmail}</h4>
                                <span style="color: var(--text-secondary); font-size: 0.9rem;">${currentTime}</span>
                            </div>
                        </div>
                    </div>
                    <p style="color: var(--text-secondary); line-height: 1.6; margin-bottom: 1rem; font-size: 1rem;">${reponseData.contenu}</p>
                    <div style="display: flex; align-items: center; gap: 1rem; flex-wrap: wrap;">
                        <button class="like-btn" data-commentaire-id="${reponseData.id}" style="background: none; border: 2px solid #e11d48; color: #e11d48; padding: 0.5rem 1rem; border-radius: 20px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; gap: 0.5rem;">
                            <span class="like-icon">ü§ç</span>
                            <span class="like-count">0</span> J'aime
                        </button>
                        <button class="reply-to-reply-btn" data-commentaire-id="${reponseData.id}" style="background: none; border: 2px solid var(--accent-purple); color: var(--accent-purple); padding: 0.5rem 1rem; border-radius: 20px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; gap: 0.5rem;">
                            üí¨ R√©pondre
                        </button>
                    </div>

                    <!-- Formulaire de r√©ponse √† une r√©ponse -->
                    <div id="reply-to-reply-form-${reponseData.id}" style="display: none; margin-top: 1rem; padding: 1rem; background: rgba(139, 92, 246, 0.05); border-radius: 10px; border-left: 3px solid var(--accent-purple);">
                        <textarea id="reply-to-reply-content-${reponseData.id}" placeholder="R√©pondre √† cette r√©ponse..." style="width: 100%; padding: 0.8rem; border: 2px solid var(--border-color); border-radius: 8px; background: var(--card-bg); color: var(--text-primary); resize: vertical; font-family: inherit; min-height: 80px; box-sizing: border-box;"></textarea>
                        <div style="margin-top: 0.8rem; display: flex; gap: 0.8rem;">
                            <button onclick="submitReplyToReply(${reponseData.id})" style="background: var(--accent-purple); color: white; padding: 0.6rem 1.2rem; border: none; border-radius: 6px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
                                Publier
                            </button>
                            <button onclick="cancelReplyToReply(${reponseData.id})" style="background: var(--border-color); color: var(--text-primary); padding: 0.6rem 1.2rem; border: none; border-radius: 6px; font-weight: 600; cursor: pointer; transition: all 0.3s ease;">
                                Annuler
                            </button>
                        </div>
                    </div>

                    <!-- Section des r√©ponses aux r√©ponses (vide par d√©faut) -->
                    <div id="replies-to-replies-${reponseData.id}" style="display: none;"></div>
                </div>
            `;
        }
        
        function generateReplyToReplyHTML(reponseData) {
            const userEmail = '{{ app.user.email }}';
            const currentTime = new Date().toLocaleString('fr-FR');
            
            return `
                <div style="background: rgba(139, 92, 246, 0.03); border-radius: 12px; padding: 1.5rem; border: 1px solid var(--border-color); margin: 0.8rem 0 0.8rem 20px; border-left: 3px solid #fbbf24;">
                    <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 0.8rem;">
                        <div style="display: flex; align-items: center; gap: 0.8rem;">
                            <div style="background: #fbbf24; color: white; padding: 0.4rem; border-radius: 50%; width: 35px; height: 35px; display: flex; align-items: center; justify-content: center; font-weight: 600; font-size: 0.9rem;">
                                ${userEmail.charAt(0).toUpperCase()}
                            </div>
                            <div>
                                <h5 style="color: var(--text-primary); margin: 0; font-size: 0.9rem;">${userEmail}</h5>
                                <span style="color: var(--text-secondary); font-size: 0.8rem;">${currentTime}</span>
                            </div>
                        </div>
                    </div>
                    <p style="color: var(--text-secondary); line-height: 1.5; margin-bottom: 0.8rem; font-size: 0.9rem;">${reponseData.contenu}</p>
                    <div style="display: flex; align-items: center; gap: 0.8rem;">
                        <button class="like-btn" data-commentaire-id="${reponseData.id}" style="background: none; border: 2px solid #e11d48; color: #e11d48; padding: 0.4rem 0.8rem; border-radius: 15px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; gap: 0.4rem; font-size: 0.85rem;">
                            <span class="like-icon">ü§ç</span>
                            <span class="like-count">0</span> J'aime
                        </button>
                    </div>
                </div>
            `;
        }
        
        function initCommentFeatures(commentaireElement) {
            // Initialiser les boutons de like
            const likeBtn = commentaireElement.querySelector('.like-btn');
            if (likeBtn) {
                likeBtn.addEventListener('click', async function(e) {
                    e.preventDefault();
                    const commentaireId = this.getAttribute('data-commentaire-id');
                    console.log('‚ù§Ô∏è Like pour le nouveau commentaire:', commentaireId);
                    
                    if (!document.body.dataset.user || document.body.dataset.user === 'false') {
                        showNotification('Vous devez √™tre connect√© pour liker un commentaire', 'warning');
                        return;
                    }
                    
                    try {
                        const response = await fetch(`/api/commentaires/${commentaireId}/likes`, {
                            method: 'POST'
                        });
                        
                        if (response.ok) {
                            const data = await response.json();
                            const icon = this.querySelector('.like-icon');
                            const count = this.querySelector('.like-count');
                            
                            if (icon) icon.textContent = data.isLiked ? '‚ù§Ô∏è' : 'ü§ç';
                            if (count) count.textContent = data.likesCount;
                        }
                    } catch (error) {
                        console.log('‚ö†Ô∏è Erreur like (ignor√©e):', error.message);
                    }
                });
            }
            
            // Initialiser le bouton de r√©ponse
            const replyBtn = commentaireElement.querySelector('.reply-btn');
            if (replyBtn) {
                replyBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    const commentaireId = this.getAttribute('data-commentaire-id');
                    showReplyForm(commentaireId);
                });
            }
        }
        
        function initReplyFeatures(reponseElement) {
            // Initialiser les boutons de like
            const likeBtn = reponseElement.querySelector('.like-btn');
            if (likeBtn) {
                likeBtn.addEventListener('click', async function(e) {
                    e.preventDefault();
                    const commentaireId = this.getAttribute('data-commentaire-id');
                    console.log('‚ù§Ô∏è Like pour la nouvelle r√©ponse:', commentaireId);
                    
                    if (!document.body.dataset.user || document.body.dataset.user === 'false') {
                        showNotification('Vous devez √™tre connect√© pour liker un commentaire', 'warning');
                        return;
                    }
                    
                    try {
                        const response = await fetch(`/api/commentaires/${commentaireId}/likes`, {
                            method: 'POST'
                        });
                        
                        if (response.ok) {
                            const data = await response.json();
                            const icon = this.querySelector('.like-icon');
                            const count = this.querySelector('.like-count');
                            
                            if (icon) icon.textContent = data.isLiked ? '‚ù§Ô∏è' : 'ü§ç';
                            if (count) count.textContent = data.likesCount;
                        }
                    } catch (error) {
                        console.log('‚ö†Ô∏è Erreur like (ignor√©e):', error.message);
                    }
                });
            }
            
            // Initialiser le bouton de r√©ponse √† une r√©ponse
            const replyToReplyBtn = reponseElement.querySelector('.reply-to-reply-btn');
            if (replyToReplyBtn) {
                replyToReplyBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    const commentaireId = this.getAttribute('data-commentaire-id');
                    showReplyToReplyForm(commentaireId);
                });
            }
        }
        
        function initReplyToReplyFeatures(reponseElement) {
            // Initialiser les boutons de like
            const likeBtn = reponseElement.querySelector('.like-btn');
            if (likeBtn) {
                likeBtn.addEventListener('click', async function(e) {
                    e.preventDefault();
                    const commentaireId = this.getAttribute('data-commentaire-id');
                    console.log('‚ù§Ô∏è Like pour la nouvelle r√©ponse √† une r√©ponse:', commentaireId);
                    
                    if (!document.body.dataset.user || document.body.dataset.user === 'false') {
                        showNotification('Vous devez √™tre connect√© pour liker un commentaire', 'warning');
                        return;
                    }
                    
                    try {
                        const response = await fetch(`/api/commentaires/${commentaireId}/likes`, {
                            method: 'POST'
                        });
                        
                        if (response.ok) {
                            const data = await response.json();
                            const icon = this.querySelector('.like-icon');
                            const count = this.querySelector('.like-count');
                            
                            if (icon) icon.textContent = data.isLiked ? '‚ù§Ô∏è' : 'ü§ç';
                            if (count) count.textContent = data.likesCount;
                        }
                    } catch (error) {
                        console.log('‚ö†Ô∏è Erreur like (ignor√©e):', error.message);
                    }
                });
            }
        }
        
        function updateCommentCount(increment) {
            const tabBtn = document.querySelector('.tab-btn[data-tab="commentaires"]');
            if (tabBtn) {
                const currentText = tabBtn.textContent;
                const match = currentText.match(/\((\d+)\)/);
                if (match) {
                    const currentCount = parseInt(match[1]);
                    const newCount = currentCount + increment;
                    tabBtn.textContent = currentText.replace(/\(\d+\)/, `(${newCount})`);
                }
            }
        }
        
        function updateReplyCount(commentaireId, increment) {
            const repliesDiv = document.getElementById(`replies-${commentaireId}`);
            if (repliesDiv && repliesDiv.children.length === 1) {
                // Premi√®re r√©ponse, afficher le bouton toggle
                const toggleBtn = document.querySelector(`[data-commentaire-id="${commentaireId}"].toggle-replies-btn`);
                if (toggleBtn) {
                    toggleBtn.style.display = 'flex';
                    const toggleText = toggleBtn.querySelector('.toggle-text');
                    if (toggleText) {
                        toggleText.textContent = `Voir 1 r√©ponse`;
                    }
                }
            }
        }
        
        function updateReplyToReplyCount(reponseId, increment) {
            const repliesToRepliesDiv = document.getElementById(`replies-to-replies-${reponseId}`);
            if (repliesToRepliesDiv && repliesToRepliesDiv.children.length === 1) {
                // Premi√®re r√©ponse √† une r√©ponse, cr√©er ou afficher le bouton toggle
                let toggleBtn = document.querySelector(`[data-commentaire-id="${reponseId}"].toggle-replies-to-replies-btn`);
                
                if (!toggleBtn) {
                    console.log('üîß Cr√©ation du bouton toggle r√©ponses aux r√©ponses pour:', reponseId);
                    
                    // Trouver l'√©l√©ment parent (la r√©ponse)
                    const parentReponse = document.querySelector(`[data-commentaire-id="${reponseId}"].reponse-item`) || 
                                        document.querySelector(`#reply-to-reply-form-${reponseId}`)?.parentElement;
                    
                    if (parentReponse) {
                        // Cr√©er le bouton toggle
                        const toggleHTML = `
                            <div style="margin-top: 1rem;">
                                <button 
                                    class="toggle-replies-to-replies-btn" 
                                    data-commentaire-id="${reponseId}" 
                                    style="background: none; border: none; color: var(--accent-purple); font-weight: 600; cursor: pointer; padding: 0.5rem 0; display: flex; align-items: center; gap: 0.5rem; font-size: 0.9rem; transition: all 0.3s ease;"
                                    onmouseover="this.style.textDecoration='underline'"
                                    onmouseout="this.style.textDecoration='none'"
                                >
                                    <span class="toggle-icon">‚ñº</span>
                                    <span class="toggle-text">Voir 1 r√©ponse √† cette r√©ponse</span>
                                </button>
                            </div>
                        `;
                        
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = toggleHTML;
                        const newToggleBtn = tempDiv.firstElementChild;
                        
                        // Ajouter le bouton avant la div des r√©ponses
                        repliesToRepliesDiv.parentNode.insertBefore(newToggleBtn, repliesToRepliesDiv);
                        
                        // Initialiser l'event listener du bouton
                        const toggleButton = newToggleBtn.querySelector('.toggle-replies-to-replies-btn');
                        if (toggleButton) {
                            toggleButton.addEventListener('click', function(e) {
                                e.preventDefault();
                                e.stopPropagation();
                                const commentaireId = this.getAttribute('data-commentaire-id');
                                console.log('üîÑ Basculement des r√©ponses aux r√©ponses pour:', commentaireId);
                                toggleRepliesToReplies(commentaireId);
                            });
                        }
                        
                        toggleBtn = toggleButton;
                        console.log('‚úÖ Bouton toggle r√©ponses aux r√©ponses cr√©√©');
                    }
                } else {
                    // Bouton existant, mettre √† jour le texte
                    toggleBtn.style.display = 'flex';
                    const toggleText = toggleBtn.querySelector('.toggle-text');
                    if (toggleText) {
                        toggleText.textContent = `Voir 1 r√©ponse √† cette r√©ponse`;
                    }
                }
            }
        }

        // Fonctions pour les favoris
        function checkFavoriteStatus(oeuvreId) {
            fetch(`/collections/verifier/${oeuvreId}`)
                .then(response => response.json())
                .then(data => {
                    updateFavoriteButton(oeuvreId, data.isFavorite);
                })
                .catch(error => {
                    console.error('Erreur lors de la v√©rification des favoris:', error);
                });
        }

        function toggleFavorite(oeuvreId, button) {
            fetch(`/collections/toggle/${oeuvreId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateFavoriteButton(oeuvreId, data.isFavorite);
                    showNotification(data.message, 'success');
                } else {
                    showNotification(data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Erreur:', error);
                showNotification('Erreur lors de la modification des favoris', 'error');
            });
        }

        function updateFavoriteButton(oeuvreId, isFavorite) {
            const button = document.getElementById(`favorite-btn-${oeuvreId}`);
            const icon = document.getElementById(`favorite-icon-${oeuvreId}`);
            const text = document.getElementById(`favorite-text-${oeuvreId}`);
            
            if (isFavorite) {
                button.classList.add('favorited');
                icon.textContent = '‚ù§Ô∏è';
                text.textContent = 'Retirer des favoris';
            } else {
                button.classList.remove('favorited');
                icon.textContent = 'ü§ç';
                text.textContent = 'Ajouter aux favoris';
            }
        }
        </script>
    </main>

    <!-- Sidebar -->
    <aside class="sidebar">
        <!-- Informations condens√©es -->
        <div class="sidebar-section">
            <h3 class="sidebar-title">üìñ Informations</h3>
            <div class="sidebar-details">
                <div class="sidebar-detail-item">
                    <span>Type</span>
                    <span>{{ oeuvre.type|default('MANGA') }}</span>
                </div>
                <div class="sidebar-detail-item">
                    <span>Chapitres</span>
                    <span>{{ oeuvre.chapitres|length }}</span>
                </div>
                {% if oeuvre.datePublication %}
                <div class="sidebar-detail-item">
                    <span>Ann√©e</span>
                    <span>{{ oeuvre.datePublication|date('Y') }}</span>
                </div>
                {% endif %}
                {% if oeuvre.auteur %}
                <div class="sidebar-detail-item">
                    <span>Auteur</span>
                    <span>{{ oeuvre.auteur.nom }}</span>
                </div>
                {% endif %}
                {% if oeuvre.tags|length > 0 %}
                <div class="sidebar-detail-item">
                    <span>Genres</span>
                    <span>{{ oeuvre.tags|length }} genre(s)</span>
                </div>
                {% endif %}
            </div>
        </div>

        <!-- Actions principales -->
        <div class="sidebar-section">
            <h3 class="sidebar-title">‚ö° Actions</h3>
            <div class="sidebar-actions">
                {% if oeuvre.chapitres|length > 0 %}
                {% set firstChapter = oeuvre.chapitres|first %}
                {% if firstChapter.mangadxChapterId %}
                    <a href="{{ path('mangadx_chapter_show', {id: firstChapter.mangadxChapterId}) }}" class="sidebar-btn sidebar-btn-primary">
                        üìñ Lire
                    </a>
                {% else %}
                    <a href="{{ path('app_chapitre_show', {id: firstChapter.id}) }}" class="sidebar-btn sidebar-btn-primary">
                        üìñ Lire
                    </a>
                {% endif %}
                {% endif %}
                
                <!-- Bouton favori -->
                {% if is_granted('ROLE_USER') %}
                <button 
                    id="favorite-btn-{{ oeuvre.id }}"
                    class="sidebar-btn sidebar-btn-favorite"
                    onclick="toggleFavorite({{ oeuvre.id }}, this)"
                    data-oeuvre-id="{{ oeuvre.id }}"
                >
                    <span id="favorite-icon-{{ oeuvre.id }}">ü§ç</span>
                    <span id="favorite-text-{{ oeuvre.id }}">Ajouter aux favoris</span>
                </button>
                {% endif %}
                
                <a href="{{ path('app_oeuvre_list') }}" class="sidebar-btn sidebar-btn-secondary">
                    üìö Catalogue
                </a>
            </div>
        </div>

        <!-- Administration (si admin) -->
        {% if is_granted('ROLE_ADMIN') %}
        <div class="sidebar-section">
            <h3 class="sidebar-title">üîê Admin</h3>
            <div class="sidebar-actions">
                <a href="{{ path('admin_oeuvre_edit', {id: oeuvre.id}) }}" class="sidebar-btn sidebar-btn-warning">
                    ‚úèÔ∏è √âditer
                </a>
                <a href="{{ path('admin_oeuvre_chapitres', {id: oeuvre.id}) }}" class="sidebar-btn sidebar-btn-info">
                    üìñ Chapitres
                </a>
                <a href="{{ path('admin_chapitre_new', {id: oeuvre.id}) }}" class="sidebar-btn sidebar-btn-success">
                    ‚ûï Nouveau
                </a>
            </div>
        </div>
        {% endif %}
    </aside>
</div>

<!-- Styles pour les onglets et le bouton favori -->
<style>
/* Styles pour les onglets */
.tab-btn {
    background: rgba(139, 92, 246, 0.1) !important;
    color: var(--text-secondary) !important;
    border: none !important;
    border-radius: 15px 15px 0 0 !important;
    padding: 1rem 2rem !important;
    font-weight: 600 !important;
    cursor: pointer !important;
    transition: all 0.3s ease !important;
}

.tab-btn.active {
    background: var(--accent-purple) !important;
    color: white !important;
}

.tab-btn:hover:not(.active) {
    background: rgba(139, 92, 246, 0.2) !important;
    color: var(--text-primary) !important;
}

.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}

/* Styles pour le bouton favori */
.sidebar-btn-favorite {
    background: linear-gradient(135deg, #e11d48, #be185d) !important;
    color: white !important;
    border: none !important;
    cursor: pointer !important;
    transition: all 0.3s ease !important;
}

.sidebar-btn-favorite:hover {
    background: linear-gradient(135deg, #be185d, #9d174d) !important;
    transform: translateY(-2px) !important;
    box-shadow: 0 4px 15px rgba(225, 29, 72, 0.4) !important;
}

.sidebar-btn-favorite.favorited {
    background: linear-gradient(135deg, #dc2626, #b91c1c) !important;
}

.sidebar-btn-favorite.favorited:hover {
    background: linear-gradient(135deg, #b91c1c, #991b1b) !important;
}

/* Styles pour les √©toiles de notation */
.star, .star-main {
    transition: all 0.2s ease !important;
    user-select: none !important;
}

.star:hover, .star-main:hover {
    transform: scale(1.2) !important;
    filter: brightness(1.2) !important;
}

/* Animation pour les √©toiles s√©lectionn√©es */
@keyframes starGlow {
    0% { text-shadow: 0 0 8px rgba(251, 191, 36, 0.6); }
    50% { text-shadow: 0 0 12px rgba(251, 191, 36, 0.8), 0 0 20px rgba(251, 191, 36, 0.4); }
    100% { text-shadow: 0 0 8px rgba(251, 191, 36, 0.6); }
}

.star.selected, .star-main.selected {
    animation: starGlow 2s ease-in-out infinite;
}

/* Effet de pulsation pour les √©toiles au hover */
.star:hover, .star-main:hover {
    animation: starGlow 1s ease-in-out infinite;
}
</style>

<!-- Script de nettoyage et finalisation -->
<script>
    // Nettoyage lors du d√©chargement de la page
    window.addEventListener('beforeunload', function() {
        console.log('üßπ Nettoyage final de la page');
        // Ne pas nettoyer le sessionStorage pour garder l'√©tat de rechargement
    });
    
    // Fonction de diagnostic pour le d√©bogage
    window.debugPageState = function() {
        console.log('üîç √âtat de la page:');
        console.log('- Utilisateur connect√©:', document.body.dataset.user);
        console.log('- Onglets actifs:', document.querySelectorAll('.tab-btn.active').length);
        console.log('- Boutons de like:', document.querySelectorAll('.like-btn').length);
        console.log('- √âtoiles de notation:', document.querySelectorAll('.star, .star-main').length);
        console.log('- Formulaires de r√©ponse:', document.querySelectorAll('[id^="reply-form-"]').length);
        console.log('- SessionStorage:', Object.keys(sessionStorage));
        console.log('- Fonctions disponibles:', {
            initTabs: typeof initTabs === 'function',
            initLikeButtons: typeof initLikeButtons === 'function',
            initReplies: typeof initReplies === 'function',
            initRatingStars: typeof initRatingStars === 'function'
        });
    };
    
    // Exposer les fonctions principales pour le d√©bogage
    window.pageFunctions = {
        initTabs,
        initLikeButtons,
        initReplies,
        initRatingStars,
        showNotification,
        debugPageState
    };
    
    // Fonction de test pour forcer un rechargement
    window.forceReload = function() {
        console.log('üîÑ For√ßage du rechargement...');
        sessionStorage.removeItem(window.reloadDebug?.pageKey || `oeuvre_{{ oeuvre.id }}_loaded`);
        window.location.reload(true);
    };
    
    // Fonction pour v√©rifier l'√©tat du rechargement
    window.checkReloadState = function() {
        const pageKey = `oeuvre_{{ oeuvre.id }}_loaded`;
        const lastLoad = sessionStorage.getItem(pageKey);
        console.log('üîç √âtat du rechargement:');
        console.log('- Cl√© de page:', pageKey);
        console.log('- Dernier chargement:', lastLoad ? new Date(parseInt(lastLoad)).toLocaleString() : 'Jamais');
        console.log('- Temps √©coul√©:', lastLoad ? Math.floor((Date.now() - parseInt(lastLoad)) / 1000) + 's' : 'N/A');
        console.log('- N√©cessite rechargement:', window.reloadDebug?.needsReload() || 'Fonction non disponible');
    };
    
    // Fonction de test pour les r√©ponses
    window.testToggleReplies = function(commentaireId) {
        console.log('üß™ Test manuel du toggle pour commentaire:', commentaireId);
        toggleReplies(commentaireId);
    };
    
    // Fonction de test pour les r√©ponses aux r√©ponses
    window.testToggleRepliesToReplies = function(commentaireId) {
        console.log('üß™ Test manuel du toggle r√©ponses aux r√©ponses pour commentaire:', commentaireId);
        toggleRepliesToReplies(commentaireId);
    };
    
    // Fonction de test pour diagnostiquer un bouton sp√©cifique
    window.testToggleButton = function(commentaireId) {
        console.log('üîç Diagnostic du bouton toggle pour:', commentaireId);
        const toggleBtn = document.querySelector(`[data-commentaire-id="${commentaireId}"].toggle-replies-to-replies-btn`);
        const repliesDiv = document.getElementById(`replies-to-replies-${commentaireId}`);
        
        console.log('Bouton trouv√©:', !!toggleBtn);
        console.log('Div trouv√©e:', !!repliesDiv);
        
        if (toggleBtn) {
            console.log('Bouton HTML:', toggleBtn.outerHTML);
            console.log('Bouton visible:', toggleBtn.offsetParent !== null);
            console.log('Bouton cliquable:', toggleBtn.style.pointerEvents !== 'none');
        }
        
        if (repliesDiv) {
            console.log('Div HTML:', repliesDiv.outerHTML);
            console.log('Div visible:', repliesDiv.offsetParent !== null);
            console.log('Div display:', repliesDiv.style.display);
        }
    };
    
    // Fonction pour forcer l'initialisation des boutons de toggle des r√©ponses aux r√©ponses
    window.forceInitRepliesToReplies = function() {
        console.log('üîß For√ßage de l\'initialisation des boutons de toggle des r√©ponses aux r√©ponses');
        const toggleRepliesToRepliesButtons = document.querySelectorAll('.toggle-replies-to-replies-btn');
        console.log('üîò Boutons trouv√©s:', toggleRepliesToRepliesButtons.length);
        
        toggleRepliesToRepliesButtons.forEach((button, index) => {
            console.log(`üîò Initialisation du bouton ${index}:`, button.getAttribute('data-commentaire-id'));
            
            // Supprimer tous les event listeners existants
            const newButton = button.cloneNode(true);
            if (button.parentNode) {
                button.parentNode.replaceChild(newButton, button);
            }
            
            // Ajouter l'event listener
            newButton.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                const commentaireId = this.getAttribute('data-commentaire-id');
                console.log('üîÑ Clic d√©tect√© sur bouton toggle r√©ponses aux r√©ponses:', commentaireId);
                toggleRepliesToReplies(commentaireId);
            });
            
            console.log(`‚úÖ Bouton ${index} initialis√©`);
        });
        
        console.log('‚úÖ Initialisation forc√©e termin√©e');
    };
    
    // Fonction pour tester l'ajout de r√©ponses aux r√©ponses
    window.testAddReplyToReply = function(reponseId, contenu = 'Test r√©ponse √† une r√©ponse') {
        console.log('üß™ Test d\'ajout de r√©ponse √† une r√©ponse pour:', reponseId);
        
        // Simuler les donn√©es de r√©ponse
        const reponseData = {
            id: Date.now(), // ID temporaire
            contenu: contenu,
            auteur: {
                email: '{{ app.user.email }}'
            },
            createdAt: new Date().toISOString()
        };
        
        // Tester l'ajout
        addNewReplyToReply(reponseId, reponseData);
        updateReplyToReplyCount(reponseId, 1);
        
        console.log('‚úÖ Test termin√©');
    };
    
    // Fonction pour diagnostiquer les r√©ponses
    window.debugReplies = function() {
        console.log('üîç Diagnostic des r√©ponses:');
        const toggleButtons = document.querySelectorAll('.toggle-replies-btn');
        const repliesDivs = document.querySelectorAll('[id^="replies-"]');
        const replyToReplyButtons = document.querySelectorAll('.reply-to-reply-btn');
        const toggleRepliesToRepliesButtons = document.querySelectorAll('.toggle-replies-to-replies-btn');
        const repliesToRepliesDivs = document.querySelectorAll('[id^="replies-to-replies-"]');
        
        console.log('- Boutons toggle r√©ponses:', toggleButtons.length);
        console.log('- Divs r√©ponses:', repliesDivs.length);
        console.log('- Boutons r√©ponse aux r√©ponses:', replyToReplyButtons.length);
        console.log('- Boutons toggle r√©ponses aux r√©ponses:', toggleRepliesToRepliesButtons.length);
        console.log('- Divs r√©ponses aux r√©ponses:', repliesToRepliesDivs.length);
        
        toggleButtons.forEach((btn, i) => {
            console.log(`  Bouton toggle ${i}:`, {
                id: btn.getAttribute('data-commentaire-id'),
                text: btn.textContent.trim(),
                visible: btn.offsetParent !== null
            });
        });
        
        repliesDivs.forEach((div, i) => {
            console.log(`  Div r√©ponses ${i}:`, {
                id: div.id,
                display: div.style.display,
                children: div.children.length,
                visible: div.offsetParent !== null
            });
        });
        
        replyToReplyButtons.forEach((btn, i) => {
            console.log(`  Bouton r√©ponse aux r√©ponses ${i}:`, {
                id: btn.getAttribute('data-commentaire-id'),
                text: btn.textContent.trim(),
                visible: btn.offsetParent !== null
            });
        });
        
        toggleRepliesToRepliesButtons.forEach((btn, i) => {
            console.log(`  Bouton toggle r√©ponses aux r√©ponses ${i}:`, {
                id: btn.getAttribute('data-commentaire-id'),
                text: btn.textContent.trim(),
                visible: btn.offsetParent !== null
            });
        });
        
        repliesToRepliesDivs.forEach((div, i) => {
            console.log(`  Div r√©ponses aux r√©ponses ${i}:`, {
                id: div.id,
                display: div.style.display,
                children: div.children.length,
                visible: div.offsetParent !== null
            });
        });
    };
    
    console.log('üéâ Page enti√®rement charg√©e et initialis√©e');
    console.log('üí° Utilisez window.forceReload() pour forcer un rechargement');
    console.log('üí° Utilisez window.checkReloadState() pour v√©rifier l\'√©tat');
    console.log('üí° Utilisez window.debugReplies() pour diagnostiquer les r√©ponses');
    console.log('üí° Utilisez window.testToggleReplies(id) pour tester le toggle manuellement');
    console.log('üí° Utilisez window.testToggleRepliesToReplies(id) pour tester le toggle des r√©ponses aux r√©ponses');
    console.log('üí° Utilisez window.testToggleButton(id) pour diagnostiquer un bouton sp√©cifique');
    console.log('üí° Utilisez window.forceInitRepliesToReplies() pour forcer l\'initialisation des boutons');
    console.log('üí° Utilisez window.testAddReplyToReply(id, contenu) pour tester l\'ajout de r√©ponses aux r√©ponses');
</script>
{% endblock %} 