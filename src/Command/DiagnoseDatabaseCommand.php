<?php

namespace App\Command;

use Doctrine\DBAL\Connection;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

#[AsCommand(
    name: 'app:diagnose-database',
    description: 'Diagnostique les probl√®mes de connexion √† la base de donn√©es',
)]
class DiagnoseDatabaseCommand extends Command
{
    public function __construct(
        private EntityManagerInterface $entityManager
    ) {
        parent::__construct();
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);

        $io->title('üîß Diagnostic de la base de donn√©es');

        try {
            $connection = $this->entityManager->getConnection();
            
            // Test de connexion
            $io->section('üîå Test de connexion');
            $connection->connect();
            $io->success('‚úÖ Connexion r√©ussie √† la base de donn√©es');

            // Informations de connexion
            $io->section('üìä Informations de connexion');
            $params = $connection->getParams();
            $io->table(
                ['Param√®tre', 'Valeur'],
                [
                    ['Driver', $params['driver'] ?? 'N/A'],
                    ['Host', $params['host'] ?? 'N/A'],
                    ['Port', $params['port'] ?? 'N/A'],
                    ['Database', $params['dbname'] ?? 'N/A'],
                    ['User', $params['user'] ?? 'N/A'],
                ]
            );

            // Test de requ√™te simple
            $io->section('üîç Test de requ√™te');
            $result = $connection->executeQuery('SELECT version()')->fetchOne();
            $io->text("Version PostgreSQL : " . $result);

            // Test des tables
            $io->section('üìã Tables disponibles');
            $tables = $connection->createSchemaManager()->listTableNames();
            if (empty($tables)) {
                $io->warning('‚ö†Ô∏è Aucune table trouv√©e - Ex√©cutez les migrations !');
                $io->note('Commande : php bin/console doctrine:migrations:migrate');
            } else {
                $io->listing($tables);
            }

            // Test des donn√©es
            if (in_array('oeuvre', $tables)) {
                $io->section('üìö Donn√©es dans la table oeuvre');
                $count = $connection->executeQuery('SELECT COUNT(*) FROM oeuvre')->fetchOne();
                $io->text("Nombre d'≈ìuvres : " . $count);

                if ($count > 0) {
                    $oeuvres = $connection->executeQuery('SELECT titre, mangadx_id FROM oeuvre LIMIT 3')->fetchAllAssociative();
                    $io->table(['Titre', 'MangaDx ID'], array_map(function($row) {
                        return [$row['titre'], $row['mangadx_id']];
                    }, $oeuvres));
                }
            }

            return Command::SUCCESS;

        } catch (\Exception $e) {
            $io->error('‚ùå Erreur de connexion : ' . $e->getMessage());
            
            $io->section('üîß Solutions possibles');
            $io->listing([
                'V√©rifiez que PostgreSQL est d√©marr√©',
                'V√©rifiez les param√®tres de connexion dans .env',
                'Ex√©cutez les migrations : php bin/console doctrine:migrations:migrate',
                'V√©rifiez que la base "manga" existe dans pgAdmin4'
            ]);

            return Command::FAILURE;
        }
    }
} 