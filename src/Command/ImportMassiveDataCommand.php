<?php

namespace App\Command;

use App\Entity\Oeuvre;
use App\Entity\Auteur;
use App\Entity\Tag;
use App\Entity\Chapitre;
use App\Repository\OeuvreRepository;
use App\Repository\AuteurRepository;
use App\Repository\TagRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

#[AsCommand(
    name: 'app:import-massive-data',
    description: 'Importe massivement des donn√©es simul√©es dans la base de donn√©es',
)]
class ImportMassiveDataCommand extends Command
{
    public function __construct(
        private EntityManagerInterface $entityManager,
        private OeuvreRepository $oeuvreRepository,
        private AuteurRepository $auteurRepository,
        private TagRepository $tagRepository
    ) {
        parent::__construct();
    }

    protected function configure(): void
    {
        $this
            ->addOption('limit', 'l', InputOption::VALUE_OPTIONAL, 'Nombre maximum d\'≈ìuvres √† cr√©er', 50)
            ->addOption('force', 'f', InputOption::VALUE_NONE, 'Supprimer les donn√©es existantes avant l\'import')
            ->addOption('dry-run', 'd', InputOption::VALUE_NONE, 'Simulation sans import r√©el')
        ;
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);
        $limit = (int) $input->getOption('limit');
        $force = $input->getOption('force');
        $dryRun = $input->getOption('dry-run');

        $io->title('üöÄ Import Massif de Donn√©es Simul√©es');

        if ($dryRun) {
            $io->note('üîç Mode simulation activ√© - Aucun import ne sera effectu√©');
        }

        if ($force && !$dryRun) {
            $io->warning('‚ö†Ô∏è Mode force activ√© - Les donn√©es existantes seront supprim√©es');
            if (!$io->confirm('√ätes-vous s√ªr de vouloir continuer ?', false)) {
                return Command::SUCCESS;
            }
            
            $this->clearExistingData($io);
        }

        // G√©n√©rer les donn√©es massives
        $massiveData = $this->generateMassiveData($limit);

        $io->section(sprintf('üìä G√©n√©ration de %d ≈ìuvres avec leurs donn√©es', count($massiveData)));
        
        if ($dryRun) {
            $this->displayDataPreview($io, $massiveData);
            return Command::SUCCESS;
        }

        // Import r√©el
        $progressBar = $io->createProgressBar(count($massiveData));
        $progressBar->start();

        $imported = 0;
        $errors = 0;

        // Pr√©-cr√©er tous les tags et auteurs pour √©viter les conflits
        $this->preCreateTagsAndAuthors($massiveData);

        foreach ($massiveData as $data) {
            $progressBar->setMessage($data['titre']);
            
            try {
                $this->createOeuvreFromData($data);
                $imported++;
                
                // Flush par batch pour optimiser
                if ($imported % 5 === 0) {
                    $this->entityManager->flush();
                    $this->entityManager->clear(); // Nettoyer le cache
                }
                
            } catch (\Exception $e) {
                $errors++;
                $io->error(sprintf('Erreur pour "%s": %s', $data['titre'], $e->getMessage()));
                // Continuer m√™me en cas d'erreur
                $this->entityManager->clear();
            }

            $progressBar->advance();
        }

        // Flush final
        $this->entityManager->flush();
        
        $progressBar->finish();
        $io->newLine(2);

        // R√©sum√©
        $io->section('üìä R√©sum√© de l\'import');
        $io->table(
            ['Statut', 'Nombre'],
            [
                ['‚úÖ Import√©s', $imported],
                ['‚ùå Erreurs', $errors],
                ['üìö Total trait√©', count($massiveData)]
            ]
        );

        if ($imported > 0) {
            $io->success(sprintf(
                'üéâ %d ≈ìuvre(s) ont √©t√© import√©es avec succ√®s !',
                $imported
            ));
            
            $io->text([
                'üí° Votre base de donn√©es est maintenant remplie avec de nombreuses ≈ìuvres.',
                'üîÑ Vous pouvez consulter les donn√©es dans l\'interface d\'administration.',
            ]);
        }

        return $errors === 0 ? Command::SUCCESS : Command::FAILURE;
    }

    private function clearExistingData(SymfonyStyle $io): void
    {
        $io->text('üóëÔ∏è Suppression des donn√©es existantes...');
        
        // Supprimer dans l'ordre pour respecter les contraintes
        $this->entityManager->createQuery('DELETE FROM App\Entity\Chapitre')->execute();
        $this->entityManager->createQuery('DELETE FROM App\Entity\CollectionUser')->execute(); 
        $this->entityManager->createQuery('DELETE FROM App\Entity\Statut')->execute();
        $this->entityManager->createQuery('DELETE FROM App\Entity\Oeuvre')->execute();
        
        $io->text('‚úÖ Donn√©es supprim√©es');
    }

    private function generateMassiveData(int $limit): array
    {
        $genres = ['Action', 'Aventure', 'Com√©die', 'Drame', 'Fantastique', 'Romance', 'Myst√®re', 'Horreur', 'Sci-Fi', 'Slice of Life', 'Sport', 'Surnaturel', 'Thriller', 'Historique', 'Mecha', 'Musical', 'Psychologique'];
        $types = ['Manga', 'Manhwa', 'Manhua', 'Webtoon', 'Light Novel'];
        $statuts = ['En cours', 'Termin√©', 'En pause', 'Annul√©'];
        
        $prefixesTitres = [
            'The Chronicles of', 'Legend of', 'Tales of', 'Adventures of', 'Story of', 'World of',
            'Mystery of', 'Secret of', 'Return of', 'Rise of', 'Fall of', 'Quest for',
            'Battle of', 'War of', 'Peace of', 'Dragon', 'Phoenix', 'Shadow', 'Light',
            'Dark', 'Golden', 'Silver', 'Crystal', 'Magic', 'Sacred', 'Lost', 'Hidden'
        ];
        
        $suffixesTitres = [
            'Academy', 'Kingdom', 'Empire', 'Realm', 'Land', 'Island', 'City', 'Tower',
            'Castle', 'Temple', 'School', 'University', 'Guild', 'Order', 'Clan',
            'Hunter', 'Warrior', 'Mage', 'Knight', 'Prince', 'Princess', 'King', 'Queen',
            'Master', 'Hero', 'Legend', 'Saga', 'Chronicles', 'Dreams', 'Nightmares'
        ];

        $auteurs = [
            'Akira Toriyama', 'Masashi Kishimoto', 'Eiichiro Oda', 'Tite Kubo', 'Hajime Isayama',
            'Kentaro Miura', 'Naoki Urasawa', 'Makoto Yukimura', 'Hiromu Arakawa', 'Koyoharu Gotouge',
            'SIU', 'Chugong', 'TurtleMe', 'Sang-Shik Lim', 'Yongje Park', 'Moonjo', 'Redice Studio',
            'Studio Ppatta', 'Carnby Kim', 'Ylab', 'Naver Webtoon', 'Kakao Webtoon', 'LINE Webtoon'
        ];

        $data = [];
        
        for ($i = 1; $i <= $limit; $i++) {
            $titre = $prefixesTitres[array_rand($prefixesTitres)] . ' ' . $suffixesTitres[array_rand($suffixesTitres)];
            
            // √âviter les doublons de titre
            $titre .= ' ' . ($i > 30 ? 'Vol. ' . rand(1, 10) : '');
            
            $type = $types[array_rand($types)];
            $auteur = $auteurs[array_rand($auteurs)];
            $statut = $statuts[array_rand($statuts)];
            
            // S√©lectionner 2-5 genres al√©atoires
            $genreCount = rand(2, 5);
            $selectedGenres = array_rand(array_flip($genres), $genreCount);
            if (!is_array($selectedGenres)) {
                $selectedGenres = [$selectedGenres];
            }
            
            // G√©n√©rer une date de publication al√©atoire (entre 2000 et 2024)
            $year = rand(2000, 2024);
            $month = rand(1, 12);
            $day = rand(1, 28);
            
            // G√©n√©rer un r√©sum√© al√©atoire
            $resumeTemplates = [
                "Dans un monde o√π [CONCEPT], [PROTAGONISTE] doit [OBJECTIF] pour [RAISON]. Avec l'aide de [ALLIES], il/elle affronte [ANTAGONISTE] dans une qu√™te √©pique.",
                "[PROTAGONISTE] d√©couvre qu'il/elle poss√®de [POUVOIR]. Maintenant, il/elle doit apprendre √† ma√Ætriser ce don pour [OBJECTIF] et sauver [LIEU].",
                "L'histoire suit [PROTAGONISTE], un(e) [PROFESSION] qui se retrouve impliqu√©(e) dans [SITUATION]. Entre [CONFLIT] et [ROMANCE], une aventure commence.",
                "Dans l'acad√©mie de [LIEU], [PROTAGONISTE] doit prouver sa valeur. Mais quand [MENACE] appara√Æt, tout change et une bataille pour [ENJEU] commence."
            ];
            
            $concepts = ['la magie existe', 'les monstres menacent l\'humanit√©', 'les dimensions se chevauchent', 'la technologie a √©volu√©'];
            $protagonistes = ['un jeune h√©ros', 'une guerri√®re d√©termin√©e', 'un √©tudiant ordinaire', 'une princesse rebelle'];
            $objectifs = ['sauver le monde', 'retrouver sa famille', 'ma√Ætriser ses pouvoirs', 'd√©couvrir la v√©rit√©'];
            $raisons = ['prot√©ger ses amis', 'venger sa famille', 'accomplir son destin', 'sauver son royaume'];
            
            $resume = str_replace(
                ['[CONCEPT]', '[PROTAGONISTE]', '[OBJECTIF]', '[RAISON]'],
                [
                    $concepts[array_rand($concepts)],
                    $protagonistes[array_rand($protagonistes)],
                    $objectifs[array_rand($objectifs)],
                    $raisons[array_rand($raisons)]
                ],
                $resumeTemplates[array_rand($resumeTemplates)]
            );
            
            $data[] = [
                'titre' => $titre,
                'auteur' => $auteur,
                'type' => $type,
                'resume' => $resume,
                'datePublication' => "$year-$month-$day",
                'couverture' => '/covers/generated/' . strtolower(str_replace(' ', '-', $titre)) . '.jpg',
                'tags' => $selectedGenres,
                'statut' => $statut,
                'chapitres' => rand(5, 200) // Nombre de chapitres al√©atoire
            ];
        }
        
        return $data;
    }

    private function displayDataPreview(SymfonyStyle $io, array $data): void
    {
        $io->section('üìã Aper√ßu des donn√©es qui seraient cr√©√©es');
        
        $preview = array_slice($data, 0, 5);
        foreach ($preview as $item) {
            $io->text(sprintf(
                '‚Ä¢ %s (%s) par %s - %d chapitres - Tags: %s',
                $item['titre'],
                $item['type'],
                $item['auteur'],
                $item['chapitres'],
                implode(', ', $item['tags'])
            ));
        }
        
        if (count($data) > 5) {
            $io->text(sprintf('... et %d autres ≈ìuvres', count($data) - 5));
        }
    }

    private function preCreateTagsAndAuthors(array $massiveData): void
    {
        // Extraire tous les tags uniques
        $allTags = [];
        $allAuthors = [];
        
        foreach ($massiveData as $data) {
            $allAuthors[] = $data['auteur'];
            $allTags = array_merge($allTags, $data['tags']);
        }
        
        $allTags = array_unique($allTags);
        $allAuthors = array_unique($allAuthors);
        
        // Cr√©er tous les auteurs manquants
        foreach ($allAuthors as $authorName) {
            $auteur = $this->auteurRepository->findOneBy(['nom' => $authorName]);
            if (!$auteur) {
                $auteur = new Auteur();
                $auteur->setNom($authorName);
                $this->entityManager->persist($auteur);
            }
        }
        
        // Cr√©er tous les tags manquants
        foreach ($allTags as $tagName) {
            $tag = $this->tagRepository->findOneBy(['nom' => $tagName]);
            if (!$tag) {
                $tag = new Tag();
                $tag->setNom($tagName);
                $this->entityManager->persist($tag);
            }
        }
        
        $this->entityManager->flush();
    }

    private function createOeuvreFromData(array $data): void
    {
        // R√©cup√©rer l'auteur (doit exister maintenant)
        $auteur = $this->auteurRepository->findOneBy(['nom' => $data['auteur']]);

        // Cr√©er l'≈ìuvre
        $oeuvre = new Oeuvre();
        $oeuvre->setTitre($data['titre']);
        $oeuvre->setType($data['type']);
        $oeuvre->setResume($data['resume']);
        $oeuvre->setCouverture($data['couverture']);
        $oeuvre->setDatePublication(new \DateTime($data['datePublication']));
        $oeuvre->setAuteur($auteur);

        // Ajouter les tags (doivent exister maintenant)
        foreach ($data['tags'] as $tagName) {
            $tag = $this->tagRepository->findOneBy(['nom' => $tagName]);
            if ($tag) {
                $oeuvre->addTag($tag);
            }
        }

        $this->entityManager->persist($oeuvre);

        // Cr√©er quelques chapitres
        $nombreChapitres = min($data['chapitres'], 20); // Limiter pour √©viter de trop charger
        for ($i = 1; $i <= $nombreChapitres; $i++) {
            $chapitre = new Chapitre();
            $chapitre->setTitre("Chapitre $i");
            $chapitre->setOrdre($i);
            $chapitre->setOeuvre($oeuvre);
            $chapitre->setPages([]); // Pages vides
            
            $this->entityManager->persist($chapitre);
        }
    }
} 