@startuml MangaThèque - Diagramme de Classes

!theme plain
skinparam classAttributeIconSize 0
skinparam classFontSize 12
skinparam classFontName Arial
skinparam backgroundColor #FFFFFF
skinparam classBackgroundColor #F8F9FA
skinparam classBorderColor #6C757D

title MangaThèque - Diagramme de Classes UML

' ===== ENTITÉS PRINCIPALES =====

class User {
  -id: int
  -email: string
  -roles: array
  -password: string
  -nom: string
  -createdAt: DateTimeImmutable
  -updatedAt: DateTimeImmutable
  --
  +getId(): int
  +getEmail(): string
  +setEmail(string): User
  +getRoles(): array
  +setRoles(array): User
  +getPassword(): string
  +setPassword(string): User
  +getNom(): string
  +setNom(string): User
  +getUserIdentifier(): string
  +eraseCredentials(): void
  +isAdmin(): bool
  +addRole(string): User
  +removeRole(string): User
  +getCreatedAt(): DateTimeImmutable
  +getUpdatedAt(): DateTimeImmutable
}

class Oeuvre {
  -id: int
  -titre: string
  -type: string
  -couverture: string
  -resume: text
  -datePublication: DateTime
  -mangadxId: string
  -statut: string
  -originalLanguage: text
  -demographic: text
  -contentRating: text
  -alternativeTitles: json
  -lastVolume: text
  -lastChapter: text
  -year: int
  -createdAt: DateTimeImmutable
  -updatedAt: DateTimeImmutable
  --
  +getId(): int
  +getTitre(): string
  +setTitre(string): Oeuvre
  +getType(): string
  +setType(string): Oeuvre
  +getResume(): string
  +setResume(string): Oeuvre
  +getCouverture(): string
  +setCouverture(string): Oeuvre
  +getImageUrl(): string
  +getAuteur(): Auteur
  +setAuteur(Auteur): Oeuvre
  +getChapitres(): Collection
  +addChapitre(Chapitre): Oeuvre
  +removeChapitre(Chapitre): Oeuvre
  +getChapitresSorted(): array
  +getFirstChapter(): Chapitre
  +getLatestChapter(): Chapitre
  +getDatePublication(): DateTime
  +setDatePublication(DateTime): Oeuvre
  +getMangadxId(): string
  +setMangadxId(string): Oeuvre
  +getStatut(): string
  +setStatut(string): Oeuvre
  +getYear(): int
  +setYear(int): Oeuvre
  +getCreatedAt(): DateTimeImmutable
  +getUpdatedAt(): DateTimeImmutable
}

class Auteur {
  -id: int
  -nom: string
  -prenom: string
  -nomPlume: string
  -biographie: text
  -dateNaissance: DateTime
  -nationalite: string
  -createdAt: DateTimeImmutable
  -updatedAt: DateTimeImmutable
  --
  +getId(): int
  +getNom(): string
  +setNom(string): Auteur
  +getPrenom(): string
  +setPrenom(string): Auteur
  +getNomPlume(): string
  +setNomPlume(string): Auteur
  +getBiographie(): string
  +setBiographie(string): Auteur
  +getDateNaissance(): DateTime
  +setDateNaissance(DateTime): Auteur
  +getNationalite(): string
  +setNationalite(string): Auteur
  +getOeuvres(): Collection
  +addOeuvre(Oeuvre): Auteur
  +removeOeuvre(Oeuvre): Auteur
  +getCreatedAt(): DateTimeImmutable
  +getUpdatedAt(): DateTimeImmutable
}

class Chapitre {
  -id: int
  -titre: string
  -ordre: int
  -resume: text
  -pages: json
  -mangadxChapterId: string
  -createdAt: DateTimeImmutable
  -updatedAt: DateTimeImmutable
  --
  +getId(): int
  +getTitre(): string
  +setTitre(string): Chapitre
  +getOrdre(): int
  +setOrdre(int): Chapitre
  +getResume(): string
  +setResume(string): Chapitre
  +getPages(): array
  +setPages(array): Chapitre
  +getMangadxChapterId(): string
  +setMangadxChapterId(string): Chapitre
  +getOeuvre(): Oeuvre
  +setOeuvre(Oeuvre): Chapitre
  +getNextChapitre(): Chapitre
  +getPreviousChapitre(): Chapitre
  +getCreatedAt(): DateTimeImmutable
  +getUpdatedAt(): DateTimeImmutable
}

class Tag {
  -id: int
  -nom: string
  -mangadxId: string
  -createdAt: DateTimeImmutable
  --
  +getId(): int
  +getNom(): string
  +setNom(string): Tag
  +getMangadxId(): string
  +setMangadxId(string): Tag
  +getOeuvres(): Collection
  +addOeuvre(Oeuvre): Tag
  +removeOeuvre(Oeuvre): Tag
  +getCreatedAt(): DateTimeImmutable
}

' ===== ENTITÉS DE RELATION =====

class CollectionUser {
  -id: int
  -dateAjout: DateTimeImmutable
  -notePersonnelle: text
  -createdAt: DateTimeImmutable
  --
  +getId(): int
  +getDateAjout(): DateTimeImmutable
  +setDateAjout(DateTimeImmutable): CollectionUser
  +getNotePersonnelle(): string
  +setNotePersonnelle(string): CollectionUser
  +getUser(): User
  +setUser(User): CollectionUser
  +getOeuvre(): Oeuvre
  +setOeuvre(Oeuvre): CollectionUser
  +getCreatedAt(): DateTimeImmutable
}

class Statut {
  -id: int
  -nom: string
  -createdAt: DateTimeImmutable
  -updatedAt: DateTimeImmutable
  --
  +getId(): int
  +getNom(): string
  +setNom(string): Statut
  +getUser(): User
  +setUser(User): Statut
  +getOeuvre(): Oeuvre
  +setOeuvre(Oeuvre): Statut
  +getCreatedAt(): DateTimeImmutable
  +getUpdatedAt(): DateTimeImmutable
}

class Commentaire {
  -id: int
  -contenu: text
  -createdAt: DateTimeImmutable
  -updatedAt: DateTimeImmutable
  --
  +getId(): int
  +getContenu(): string
  +setContenu(string): Commentaire
  +getLikesCount(): int
  +isLikedByUser(User): bool
  +isReponse(): bool
  +getReponsesCount(): int
  +getAuteur(): User
  +setAuteur(User): Commentaire
  +getOeuvre(): Oeuvre
  +setOeuvre(Oeuvre): Commentaire
  +getParent(): Commentaire
  +setParent(Commentaire): Commentaire
  +getReponses(): Collection
  +addReponse(Commentaire): Commentaire
  +removeReponse(Commentaire): Commentaire
  +getLikes(): Collection
  +addLike(CommentaireLike): Commentaire
  +removeLike(CommentaireLike): Commentaire
  +getCreatedAt(): DateTimeImmutable
  +getUpdatedAt(): DateTimeImmutable
}

class CommentaireLike {
  -id: int
  -createdAt: DateTimeImmutable
  --
  +getId(): int
  +getUser(): User
  +setUser(User): CommentaireLike
  +getCommentaire(): Commentaire
  +setCommentaire(Commentaire): CommentaireLike
  +getCreatedAt(): DateTimeImmutable
}

class OeuvreNote {
  -id: int
  -note: int
  -createdAt: DateTimeImmutable
  -updatedAt: DateTimeImmutable
  --
  +getId(): int
  +getNote(): int
  +setNote(int): OeuvreNote
  +getUser(): User
  +setUser(User): OeuvreNote
  +getOeuvre(): Oeuvre
  +setOeuvre(Oeuvre): OeuvreNote
  +getCreatedAt(): DateTimeImmutable
  +getUpdatedAt(): DateTimeImmutable
}

' ===== RELATIONS =====

' Relations User
User ||--o{ CollectionUser : "possède"
User ||--o{ Statut : "a"
User ||--o{ Commentaire : "écrit"
User ||--o{ CommentaireLike : "like"
User ||--o{ OeuvreNote : "note"

' Relations Oeuvre
Oeuvre }o--|| Auteur : "écrit par"
Oeuvre ||--o{ Chapitre : "contient"
Oeuvre }o--o{ Tag : "tagué par"
Oeuvre ||--o{ CollectionUser : "dans collection"
Oeuvre ||--o{ Statut : "a statut"
Oeuvre ||--o{ Commentaire : "commenté"
Oeuvre ||--o{ OeuvreNote : "noté"

' Relations Commentaire
Commentaire }o--|| User : "écrit par"
Commentaire }o--|| Oeuvre : "sur"
Commentaire }o--o| Commentaire : "répond à"
Commentaire ||--o{ CommentaireLike : "liké par"

' Relations Chapitre
Chapitre }o--|| Oeuvre : "appartient à"

' Relations Auteur
Auteur ||--o{ Oeuvre : "écrit"

' Relations Tag
Tag }o--o{ Oeuvre : "tag"

' Relations CollectionUser
CollectionUser }o--|| User : "appartient à"
CollectionUser }o--|| Oeuvre : "contient"

' Relations Statut
Statut }o--|| User : "appartient à"
Statut }o--|| Oeuvre : "sur"

' Relations CommentaireLike
CommentaireLike }o--|| User : "par"
CommentaireLike }o--|| Commentaire : "sur"

' Relations OeuvreNote
OeuvreNote }o--|| User : "par"
OeuvreNote }o--|| Oeuvre : "sur"

' ===== NOTES =====
note top of User : "Gestion des utilisateurs\net authentification"
note top of Oeuvre : "Entité centrale du système\n(mangas, animes, etc.)"
note top of Chapitre : "Chapitres/épisodes\ndes œuvres"
note top of Commentaire : "Système de commentaires\navec réponses"
note top of CollectionUser : "Collection personnelle\nde l'utilisateur"
note top of Statut : "Statut de lecture\n(lu, en cours, etc.)"

@enduml 